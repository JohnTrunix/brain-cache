{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Brain Cache!","text":"<p>Welcome to JohnTrunix's Brain Cache, my personal go-to hub for tech-savvy personal notes and insights.</p> <p>On this page, I document my acquired knowledge and store it as a personal library. You'll find various theoretical aspects, code documentation, and even side projects when I have the time and energy to work on them. This page is constantly being expanded.</p> <p>Note:  You can directly jump to the next site with . or back with ,</p> <p></p> <p>Note</p> <p>This page is a work in progress. I'm constantly adding new content and updating old content if I find time for it. If you find any errors or have any suggestions, please let me know!</p> <p>Disclaimer</p> <p>This page is not meant to be a complete guide or reference for any of the topics I cover. It is simply a personal notebook for me to store my own notes and insights. I do not guarantee that the information on this page is correct or up-to-date but I will try to keep it as accurate as possible.</p> <p>Contributions and Sense of this page</p> <p>If you're interested in contributing something, please let me know first so we can discuss it. I want to keep this site as my own personal notebook and not get too carried away with other people's ideas. </p>"},{"location":"blender/","title":"Blender","text":"<p>This topic is comming soon! In my semester break I will refresh my Blender knowledge </p>"},{"location":"blender/shortcuts/","title":"Blender Shortcuts","text":""},{"location":"coding/golang/","title":"Go","text":"<p>Code Review Comments: CodeReviewComments golang/go</p>"},{"location":"coding/golang/#installation-setup","title":"Installation &amp; Setup","text":"<p>Installation instructions: golang.org/doc/install</p>"},{"location":"coding/golang/#environment-variables","title":"Environment Variables","text":"<pre><code>setx GOPATH %USERPROFILE%\\go\nsetx path \"%path%;%USERPROFILE%\\bin\"\n</code></pre>"},{"location":"coding/golang/#important-packages","title":"Important Packages","text":"<p>Adnvanced Formatter</p> <pre><code>go install golang.go/x/tools/cmd/goimports@latest\n</code></pre> <p>Linter</p> <pre><code>go install golang.org/x/lint/golint@latest\n</code></pre>"},{"location":"coding/golang/commands/","title":"Go Commands","text":""},{"location":"coding/golang/commands/#build-compile-run","title":"Build / Compile / Run","text":"<p>Compile, execute and delete the binary:</p> <pre><code>go run main.go\n</code></pre> <p>Build binary:</p> <pre><code>go build main.go\n</code></pre> <p>Note</p> <p>Rename binary with <code>-o &lt;name&gt;</code> flag:</p> <p>Run binary:</p> <pre><code>./main\n</code></pre> <p>Download Packages:</p> <pre><code>go install github.com/rakyll/hey@latest\n</code></pre> <p>Note</p> <p>Change Version with <code>@&lt;version&gt;</code></p>"},{"location":"coding/golang/commands/#linting-formatting","title":"Linting / Formatting","text":"<p>Format Code:</p> <pre><code>go fmt\n</code></pre> <p>Group Imports:</p> <pre><code>goimports -l -w\n</code></pre> <p>Lint Code:</p> <pre><code>golint ./...\n</code></pre> <p>Vet Code:</p> <p>Syntax is correct but may have other issues</p> <pre><code>go vet ./...\n</code></pre> <p>All in one Linting:</p> <pre><code>golangci-lint run\n</code></pre> <p>Note</p> <p>This is a wrapper for many linters and can check code in parallel</p> <p>Guide</p>"},{"location":"coding/golang/types/","title":"Go Datatypes","text":"<p>Info</p> <p>Every not declared <code>variable</code> is 0 by default!</p>"},{"location":"coding/golang/types/#literals","title":"Literals","text":"<p>Note</p> <p>Literals can have differenct Base, like <code>0x</code> for Hexadecimal, <code>0b</code> for Binary, <code>0o</code> for Octal, etc.</p> Type Example Integer <code>14</code>, <code>0b</code>, <code>0o</code> (decimal, binary, octal) Float <code>3.14</code>, <code>1.6e-10</code> Rune <code>a</code>, <code>\\141</code>, <code>\\u0061</code>, <code>\\U00000061</code>, <code>\\n</code>, <code>\\t</code>, <code>\\</code> <p>Bitshifting</p> <pre><code>1 &lt;&lt; 10 // 1024\n10 &gt;&gt; 1 // 5\n</code></pre>"},{"location":"coding/golang/types/#integer-numeric-types","title":"Integer Numeric Types","text":"<p>Note</p> <p>For general purpose use <code>int</code></p> Type min max size int8 -128 127 8 bit int16 -32768 32767 16 bit int32 -2147483648 2147483647 32 bit int64 -9223372036854775808 9223372036854775807 64 bit uint8 0 255 8 bit uint16 0 65535 16 bit uint32 0 4294967295 32 bit uint64 0 18446744073709551615 64 bit <pre><code>var a int = 14\nvar b int8 = 14\nvar c uint8 = 14\n</code></pre>"},{"location":"coding/golang/types/#floating-point-numeric-types","title":"Floating Point Numeric Types","text":"Type min max size float32 1.2E-38 3.4E+38 32 bit float64 2.2E-308 1.7E+308 64 bit <pre><code>var a float = 3.14\nvar b float32 = 3.14\nvar c float64 = 3.14\n</code></pre>"},{"location":"coding/golang/types/#boolean","title":"Boolean","text":"<pre><code>var b bool\nb = true\nb = false\n</code></pre>"},{"location":"coding/python/fastapi/","title":"Python FastAPI","text":"<p>FastAPI1 is a modern, fast (high-performance), web framework for building APIs.</p> <p>Info</p> <p>FastAPI takes advantage of Python type hints.</p> <p>Features</p> <p>Fast, high performance, fast to code, intuitive, short, robust, standards-based</p>"},{"location":"coding/python/fastapi/#installation","title":"Installation","text":"<pre><code>pip install fastapi\n</code></pre> <p>Info</p> <p>ASGI server ist needed for production:</p> <ul> <li>Uvicorn</li> <li>Hypercorn</li> </ul> <pre><code>pip install \"uvicorn[standard]\"\n</code></pre>"},{"location":"coding/python/fastapi/#interactive-api-docs-automatic","title":"Interactive API Docs (automatic)","text":"Swagger UI2 ReDoc3 http://127.0.0.1:8000/docs http://127.0.0.1:8000/redoc"},{"location":"coding/python/fastapi/#http-methods","title":"HTTP Methods","text":"<p>Note</p> <p>FastAPI works with the OpenAPI Schema.</p> HTTP Method Description FastAPI Decorator GET Read data <code>@app.get()</code> POST Create data <code>@app.post()</code> PUT Update data <code>@app.put()</code> DELETE Delete data <code>@app.delete()</code> <p>Methods in FastAPI are defined with the <code>@app.&lt;method&gt;()</code> decorator.</p> <pre><code>@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"coding/python/fastapi/#example","title":"Example","text":"<pre><code>from typing import Union\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <pre><code>uvicorn main:app --reload\n</code></pre> <ol> <li> <p>https://fastapi.tiangolo.com/ \u21a9</p> </li> <li> <p>https://swagger.io/tools/swagger-ui/ \u21a9</p> </li> <li> <p>https://github.com/Redocly/redoc \u21a9</p> </li> </ol>"},{"location":"coding/python/fastapi/parameter/","title":"FastAPI Parameters","text":"<p>Path parameter in decorator, gets executed wenn call is made to <code>'/'</code> with <code>get</code> method.</p> <pre><code>@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"coding/python/fastapi/parameter/#path-parameters","title":"Path Parameters","text":"<p>Path variables are defined in the path of the decorator with <code>{}</code>.</p> <pre><code>@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre>"},{"location":"coding/python/fastapi/parameter/#validation-with-type-hints","title":"Validation with Type Hints","text":"<pre><code>@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> <ul> <li><code>{item_id} = 1</code> results <code>{\"item_id\": 1}</code></li> <li><code>{item_id} = \"foo\"</code> results <code>type_error.integer</code></li> </ul> <p>Warning: Order matters</p> <p><code>/users/me</code> has to be defined before <code>/users/{user_id}</code></p>"},{"location":"coding/python/fastapi/parameter/#predefined-values","title":"Predefined Values","text":"<pre><code>from enum import Enum\n\nclass Name(str, Enum):\n    a = \"a\"\n    b = \"b\"\n\n@app.get(\"/models/{name}\")\ndef get(name: Name):\n    if name == Name.a:\n        return {\"name\": name, \"value\": \"a\"}\n    if name == Name.b:\n        return {\"name\": name, \"value\": \"b\"}\n    return {\"name\": name, \"value\": \"unknown\"}\n</code></pre>"},{"location":"coding/python/fastapi/parameter/#path-parameter-converter","title":"Path Parameter Converter","text":"<p>Note</p> <p>If the path has no other parameters <code>{}</code>, just the path use <code>:path</code></p> <pre><code>@app.get(\"/files/{file_path:path}\")\ndef read_file(file_path: str):\n    return {\"file_path\": file_path}\n</code></pre>"},{"location":"coding/python/fastapi/parameter/#query-parameters","title":"Query Parameters","text":"<p>Other function parameters are interpreted as query parameters.</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <ul> <li><code>?</code> starts query parameter list</li> <li><code>&amp;</code> separates query parameters</li> </ul>"},{"location":"coding/python/fastapi/parameter/#default-query-parameters","title":"Default Query Parameters","text":"<pre><code>@app.get(\"/items/\")\ndef read_items(q: str = None):\n    return {\"q\": q}\n</code></pre> <ul> <li><code>q = None</code> default value</li> </ul>"},{"location":"coding/python/fastapi/parameter/#required-query-parameters","title":"Required Query Parameters","text":"<pre><code>@app.get(\"/items/\")\ndef read_items(q: str):\n    return {\"q\": q}\n</code></pre> <ul> <li><code>q</code> is required</li> </ul>"},{"location":"coding/python/fastapi/parameter/#optional-query-parameters","title":"Optional Query Parameters","text":"<pre><code>@app.get(\"/items/\")\ndef read_items(q: str | None = None):\n    return {\"q\": q}\n</code></pre> <ul> <li><code>q = None</code> is optional and default <code>None</code></li> </ul>"},{"location":"coding/python/fastapi/parameter/#multiple-path-and-query-parameters","title":"Multiple Path and Query Parameters","text":"<p>Info</p> <p>FasAPI detects all path parameters and query parameters by name.</p> <pre><code>@app.get(\"/users/{user_id}/items/{item_id}\")\ndef read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False):\n    ...\n    return item\n</code></pre>"},{"location":"coding/python/fastapi/request-body/","title":"Fast API Request Body","text":"<p>Info</p> <p>Sending data to server/client, the data is sent in the request body.</p> <ul> <li>API almost has to send response body.</li> <li>Client don't have to send often request body.</li> </ul>"},{"location":"coding/python/fastapi/request-body/#datamodel-creation","title":"Datamodel Creation","text":"<p>Note</p> <p>Datamodels are created with <code>pydantic</code> library.</p> <p>Same logic with <code>optional, default, required</code> parameters.</p> Backend gets POST requestResult <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> Response<pre><code>{\n\"name\": \"Foo\",\n\"description\": \"An optional description\",\n\"price\": 45.2,\n\"tax\": 3.5\n},\n{\n\"name\": \"Foo\",\n\"price\": 45.2\n}\n</code></pre>"},{"location":"coding/python/fastapi/request-body/#data-model-usage","title":"Data Model Usage","text":"<p>Tip</p> <p><code>Item</code> Datamodel dict can be updated with new key-value pairs.</p> <pre><code>class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\nitem_dict = item.dict()\nif item.tax:\nprice_with_tax = item.price + item.tax\nitem_dict.update({\"price_with_tax\": price_with_tax})\nreturn item_dict\n</code></pre>"},{"location":"coding/python/fastapi/request-body/#request-body-path-query-parameters","title":"Request Body &amp; Path &amp; Query Parameters","text":"<p>Info</p> <p>FasAPI detects/defines all parameters name, also in Datamodels.</p> <pre><code>class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\napp = FastAPI()\n\n@app.put(\"/items/{item_id}\")\nasync def create_item(item_id: int, item: Item, q: str | None = None):\nresult = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre>"},{"location":"coding/python/pickle/","title":"Python Pickle","text":"<p>Pickle is a standard Python module for serializing and deserializing Python objects. It is used to save objects to a file and load them back later.</p> <p>Warning</p> <p>Pickle is not secure. Never unpickle data received from an untrusted or unauthenticated source.</p>"},{"location":"coding/python/pickle/#pickle-vs-json","title":"Pickle vs JSON","text":"<ul> <li>Pickle is a binary format, while JSON is a text format</li> <li>Pickle is more efficient than JSON</li> <li>Pickle is not human-readable</li> <li>Pickle is not secure (can execute arbitrary code)</li> </ul>"},{"location":"coding/python/pickle/#example","title":"Example","text":"<pre><code>import pickle\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f'Person({self.name}, {self.age})'\n\nperson = Person('John', 30)\n</code></pre> <p>Save the object to a file:</p> <pre><code>with open('person.pickle', 'wb') as f:\n    pickle.dump(person, f)\n</code></pre> <p>Load the object from a file:</p> <pre><code>with open('person.pickle', 'rb') as f:\n    person = pickle.load(f)\n</code></pre> <p>Tip</p> <p>Use <code>cPickle</code> instead of <code>pickle</code> for better performance (C implementation up to 1000 times faster)</p>"},{"location":"coding/python/pickle/#multiple-objects","title":"Multiple Objects","text":"<pre><code>import pickle\n\np1 = Person('John', 30)\np2 = Person('Jane', 25)\n\nwith open('people.pickle', 'wb') as f:\n    pickle.dump(p1, f)\n    pickle.dump(p2, f)\n</code></pre> <p>Load the objects from a file in the same order:</p> <pre><code>with open('people.pickle', 'rb') as f:\n    p1 = pickle.load(f)\n    p2 = pickle.load(f)\n</code></pre>"},{"location":"coding/python/pickle/#pickle-dataframes","title":"Pickle DataFrames","text":"picklespandas <pre><code>data = {}\ndata['df1'] = df1\ndata['df2'] = df2\n\nwith open('data.pickle', 'wb') as f:\n    pickle.dump(data, f)\n\nwith open('data.pickle', 'rb') as f:\n    data = pickle.load(f)\n\ndata1 = data['df1']\ndata2 = data['df2']\n</code></pre> <pre><code>df1.to_pickle('df1.pickle')\ndf2.to_pickle('df2.pickle')\n\ndf1 = pd.read_pickle('df1.pickle')\ndf2 = pd.read_pickle('df2.pickle')\n</code></pre>"},{"location":"coding/python/pydantic/","title":"Python Pydantic","text":""},{"location":"coding/python/typing/","title":"Python Typing","text":"<p>Simple typing syntax for Python variables, functions and classes with the <code>typing</code> library.</p> <pre><code>from typing import ...\n</code></pre> <ul> <li>https://docs.python.org/3/library/typing.html</li> </ul> <p>Note</p> <p>For more specific data validation, use Pydantic models.</p> <ul> <li>https://docs.pydantic.dev/</li> </ul> <pre><code>pip install pydantic\n</code></pre>"},{"location":"coding/python/typing/#function-inputs","title":"Function Inputs","text":"<p>Easy Usage</p> <pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n</code></pre> <ul> <li><code>a</code>, <code>b</code> are <code>int</code> type</li> <li><code>func</code> returns <code>int</code> type</li> </ul> <p>Lists / Dicts</p> <pre><code>def process(items: list[int]):\n    pass\n</code></pre> <ul> <li><code>items</code> is a <code>list</code> of <code>int</code> type</li> </ul> <pre><code>def process(items: dict[str, int]):\n    pass\n</code></pre> <ul> <li><code>items</code> is a <code>dict</code> with <code>str</code> keys and <code>int</code> values</li> </ul> <p>Optional</p> <pre><code>from typing import Optional\n\ndef process(a: int, b: Optional[int] = 0):\n    pass\n</code></pre> <ul> <li><code>b</code> is optional and defaults to <code>0</code></li> </ul> <p>Union</p> <pre><code>from typing import Union\n\ndef process(a: Union[int, str]):\n    pass\n</code></pre> <ul> <li><code>a</code> can be <code>int</code> or <code>str</code> type</li> </ul>"},{"location":"coding/python/typing/#function-outputs","title":"Function Outputs","text":"<p>Return Values</p> <pre><code>def process() -&gt; list[int]:\n    return [1, 2, 3]\n</code></pre> <ul> <li><code>process</code> returns a <code>list</code> of <code>int</code> type</li> </ul> <pre><code>def process() -&gt; tuple[str, int]:\n    return 'a', 1\n</code></pre> <ul> <li><code>process</code> returns a <code>tuple</code> of <code>str</code> and <code>int</code> type</li> </ul> <p>Return None</p> <pre><code>def process() -&gt; None:\n    pass\n</code></pre> <ul> <li><code>process</code> returns <code>None</code></li> </ul>"},{"location":"coding/python/typing/#classes","title":"Classes","text":"<p>Class Attributes</p> <pre><code>class A:\n    def __init__(self, a: int):\n        self.a = a\n\ndef process(a: A):\n    pass\n</code></pre>"},{"location":"ds-study/","title":"Data Science Studies","text":"<p>This are my personal notes for the bachelor's degree program Data Science at ZHAW. Many notes were integrated in other subpages of this website. This page is just a bucket for standalone notes.</p> <p>Looking for my math notes? See my \\(\\small\\LaTeX\\) Notes here.</p>"},{"location":"ds-study/#courses","title":"Courses","text":"Abbr. Name [MATH] ANA1, ANA2, LA1, LA2 [DE1] Data Engineering 1 [PROG2] Programming 2 <code>deprecated</code>"},{"location":"ds-study/de1/regex/","title":"RegEx","text":""},{"location":"ds-study/de1/regex/#settings","title":"Settings","text":"Setting Description <code>re.match(pattern, string)</code> First match in string from start <code>re.search(pattern, string)</code> First match in string <code>re.findall(pattern, string)</code> Find all matches in string <code>re.sub(pattern, repl, string)</code> Replace all matches in string <code>re.compile(pattern, flags=0)</code> Compile <code>str</code> to RegEx object"},{"location":"ds-study/de1/regex/#meta-characters","title":"Meta Characters","text":"Meta Character Description Example <code>[ ]</code> Match any character in the brackets [a-c] <code>[^ ]</code> Match any character except in [ ] [^5] <code>\\</code> Escape character to escape class or specific match \\d <code>\\d</code> Escape character for digits \\d <code>\\w</code> Escape character for word characters \\w <code>\\s</code> Escape character for whitespace \\s <code>\\S</code> Escape character for non-whitespace \\S <code>*</code> Character occurs 0 or more times a* <code>+</code> Character occurs 1 or more times a+ <code>?</code> Character occurs 0 or 1 times a? <code>{n}</code> Character occurs exactly n times a{3} <code>{n,}</code> Character occurs n or more times a{3,} | Either or a|b"},{"location":"ds-study/de1/regex/#flags","title":"Flags","text":"Flag long name Description <code>re.A</code> <code>re.ASCII</code> ASCII only matching <code>re.I</code> <code>re.IGNORECASE</code> Case insensitive matching <code>re.M</code> <code>re.MULTILINE</code> Multiline matching <code>re.S</code> <code>re.DOTALL</code> . special character, matches all characters <code>re.X</code> <code>re.VERBOSE</code> Verbose RegEx <code>re.L</code> <code>re.LOCALE</code> Matching based on locale language"},{"location":"ds-study/de1/regex/#common-patterns","title":"Common Patterns","text":"<p>Remove redundant whitespaces</p> <pre><code>text = \"if     you    want    to    remove    redundant    whitespaces\"\nre.sub(r\"\\s+\", \" \", text)\n\n# &gt;&gt;&gt; 'if you want to remove redundant whitespaces'\n</code></pre> <p>Remove special characters</p> <pre><code>text = \"remove # special @@ characters % ...\"\nre.sub(r\"[^a-zA-Z0-9]+\", \"\", text)\n\n## &gt;&gt;&gt; 'remove special characters'\n</code></pre> <p>Keep only numeric/alphabetic characters</p> <pre><code>text = \"numbers 123 and letters abc\"\nre.sub(r\"[^a-zA-Z]+\", \"\", text)\nre.sub(r\"[^0-9]+\", \"\", text)\n\n# &gt;&gt;&gt; 'numbersandletters'\n# &gt;&gt;&gt; '123'\n</code></pre> <p>Get URLs from text</p> <pre><code>text = \"This is a text with a URL www.google.com and another URL https://www.zhaw.ch\"\nre.findall(r\"https?://\\S+|www\\.\\S+\", text)\n\n# &gt;&gt;&gt; ['www.google.com', 'https://www.zhaw.ch']\n</code></pre> <p>Get email addresses from text</p> <pre><code>text = \"This is a text with an email hallo@gmail.com\"\nre.findall(\"[\\w\\.-]+@[\\w\\.-]+\\.\\w+\", text)\n\n# &gt;&gt;&gt; ['hallo@gmailcom']\n</code></pre> <p>Get HTML tags from text</p> <pre><code>text = \"This is a text with a &lt;b&gt;bold&lt;/b&gt; tag and a &lt;a href='https://www.zhaw.ch'&gt;link&lt;/a&gt;\"\nre.findall(r\"&lt;.*?&gt;\", text)\n\n# &gt;&gt;&gt; ['&lt;b&gt;', '&lt;/b&gt;', '&lt;a href='https://www.zhaw.ch'&gt;', '&lt;/a&gt;']\n</code></pre> <p>Remove HTML tags from text</p> <pre><code>text = \"This is a text with a &lt;b&gt;bold&lt;/b&gt; tag and a &lt;a href='https://www.zhaw.ch'&gt;link&lt;/a&gt;\"\nre.sub(r\"&lt;.*?&gt;\", \"\", text)\n\n# &gt;&gt;&gt; 'This is a text with a bold tag and a link'\n</code></pre>"},{"location":"ds-study/de1/structured/","title":"Structured Data","text":""},{"location":"ds-study/de1/structured/#save-data","title":"Save Data","text":"Flat Files Relational Systems easy to read, write, analyze well defined structure no optimsed access well structured and organized inconsistent, concurrent, integrity problems metadata in form of schema multiple users simultaneously good Query processing"},{"location":"ds-study/de1/structured/#oltp-vs-olap","title":"OLTP vs OLAP","text":"<p>OLTP - Online Transaction Processing</p> <p>OLAP - Online Analytical Processing</p>"},{"location":"ds-study/de1/structured/#oltp","title":"OLTP","text":"Advantages Usage Many small writes Ecommerce Real time Booking Systems Fast Bank Transactions Efficient Consumer Goods"},{"location":"ds-study/de1/structured/#olap","title":"OLAP","text":"Advantages Usage Analysis of large Amounts of Data Complex Business Questions Different Data Sources BI Systems Aggregations Data Warehouse Environments Multidimensional Data"},{"location":"ds-study/de1/structured/#comparision","title":"Comparision","text":"OLTP OLAP Includes Day to Day Transactions Includes historical Transactions OLTP is used by DB Professionals OLAP is used by Managers and Analysts To keep running the business to analyze the business Focus on Data Focus on Information ER Diagram Star/Snowflake Schema Highly detailed with flat relational Data Aggregated, Multidimensional Data Around 1000 Users Around 100 Users Amount of Record access: 10 Amount of Record access: 1 Mio DB Size: 100MB - 100GB DB Size: 100GB - 100TB"},{"location":"ds-study/de1/structured/#olap-operations","title":"OLAP Operations","text":"<p>Info</p> <p>Operations to transform &amp; analyze multidimensional Data Cubes</p>"},{"location":"ds-study/de1/structured/#pivoting-rotation","title":"Pivoting / Rotation","text":"<p>Cube rotation at Dimensions change, analysis from different perspectives. Perspectives</p> <p></p>"},{"location":"ds-study/de1/structured/#roll-up-drill-down","title":"Roll-up / Drill-down","text":"<p>Roll-up - Aggregation of detailed Data (Dimension Reduction)</p> <p>Drill-down - Breakdown of aggregated Data (Dimension Enlargement)</p> <p></p>"},{"location":"ds-study/de1/structured/#slice-dice","title":"Slice / Dice","text":"<p>Slice - Selection of one slice of a Dimension</p> <p>Dice - Selection of one or more slices of multiple Dimensions</p> <p></p>"},{"location":"ds-study/de1/structured/#rolap-molap-holap","title":"ROLAP, MOLAP, HOLAP","text":"<p>MOLAP - Multidimensional OLAP: Datawarehouse is a proprietary system, tailored for multi-dimensional data manipulations</p> <p>ROLAP - Relational OLAP: Multi-dimensional data mapped onto tables, and manipulations mapped onto relational queries</p> <p>HOLAP - Hybrid OLAP: Relational systems extended with specific OLAP functionalities</p>"},{"location":"ds-study/de1/structured/#data-warehouse","title":"Data Warehouse","text":"<p>Info</p> <p>Repository of integrated Data which manages multiple Data Sources</p> <p></p> <p>Characteristics of a Data Warehouse</p> <ul> <li>Collection of Data to support Management's Decision Making Process</li> <li>Subject oriented (Product, Customer, Sales, Revenue, etc.)</li> <li>Integrated (from heterogeneous Data Sources)</li> <li>Time Variant (historical Point of View)</li> <li>Non-volatile (Data is never removed when new Data is added)</li> <li>Data Warehouse is seperate from Operational Database</li> </ul> <p>Types of Data Warehouses</p> <ul> <li> <p>Information Processing</p> <ul> <li>Data Processing in Data Warehouse</li> <li>Simple Statistics</li> </ul> </li> <li> <p>Analytical Processing</p> <ul> <li>Supports analytical Processing</li> <li>Slice &amp; Dice, Drill-down, Roll-up, etc.</li> </ul> </li> <li> <p>Data Mining</p> <ul> <li>hidden Patterns, unknown Correlations, etc.</li> <li>Classification, Prediction, etc.</li> </ul> </li> </ul>"},{"location":"ds-study/de1/structured/#data-warehouse-modelling","title":"Data Warehouse Modelling","text":"Qualitative Quantitative Category Attributes Summary Attributes (Subject of Analysis) Data as navigation Structure (Drillpahts) Cells of Data Cubes (Dimensions as Edges) Modeled as Term Hierarchies with Dimensions <p>Dimensions</p> <ul> <li>Describes a view of Measures</li> <li>Orthogonal Structure for Data Space</li> </ul> <p>Dimensional Hierarchies</p> <ul> <li>Nodes f\u00fcr classification Hierarchies</li> <li>Classification Level describes granularity of Data</li> <li>Representation of Dimensions via classification Schema</li> </ul> <p>Simple Hierarchies</p> <pre><code>graph LR\n  TOP --&gt; country --&gt; city --&gt; store</code></pre> <ul> <li>Higher Hierarchy Level contains aggregated Values of lower Level</li> </ul> <p>Parallel Hierarchies</p> <pre><code>graph LR\n    TOP --&gt; year\n    TOP --&gt; week\n\n    year --&gt; quarter\n    quarter --&gt; month\n    month --&gt; day\n    week --&gt; day</code></pre> <ul> <li>Multiple independent Grouping Options</li> </ul> <p>Dimension Table</p> <ul> <li>ID for classification Node</li> <li>Characteristic Attributes (Brand, Producer, Title, etc.)</li> <li>Foreign Key (for direct Parent Hierarchy Level)</li> </ul> <p>Fact Table</p> <ul> <li>Foreign Keys (referencing bottom-level Category of each Dimension)</li> <li>Set of all Foreign Keys (= Composite Primary Key)</li> </ul>"},{"location":"ds-study/de1/structured/#star-schema","title":"Star Schema","text":"<ul> <li>Avoiding Joins over multiple Tables</li> <li>Denormalized Schema (Data Redundancy)</li> <li>One Dimension Table per Dimension</li> </ul>"},{"location":"ds-study/de1/structured/#snowflake-schema","title":"Snowflake Schema","text":"<ul> <li>Mapping of Classification (seperate Tables for each Dimension/Level/Classification)</li> <li>Normalized Schema (avoiding Update Anomalies, Redundancy, etc.)</li> </ul>"},{"location":"ds-study/de1/structured/#star-vs-snowflake-schema","title":"Star vs Snowflake Schema","text":"Star Schema Snowflake Schema Normalization &amp; Data Redundancy denromalized, redundant Data in Dim Tables fully normalized Dim Tables Query Complexity simple Queries complex Queries Query Performance faster slower Disk Space more Storage less Storage Data Integrity Issues might occur less likely Setup / Maintenance easier Setup, harder Maintenance harder Setup, easier Maintenance"},{"location":"ds-study/de1/structured/#data-lake","title":"Data Lake","text":"<p>Info</p> <p>Collection of many Data and Data Sources (structured, unstructured, semi-structured)</p> Data Warehouse Data Lake Stores structured Data that has been extracted, transformed and loaded from various Sources Stores raw, unstructured or semi-structured Data from various Sources Data is stored in a predefined Schema with a Structure Data is stored in its native Format without a predefined Schema/Structure Designed for complex Queries and generating Reports Designed for storing and processing large volumes of Data Provides a centralized/organized approach to Data Storage Provides a flexible/scalable approach to Data Storage Data Processing is performed before Data Load into Warehouse, can be time-consuming and ressource-intensive Data Processing is performed on an as-needed basis, more agile/scalable Optimized for BI and Analytics Optimized for Data Exploration, Machine Learning and advanced Analytics Data is already cleaned and processed Requires additional processing and cleaning Schema on Write Schema on Read Higher cost of storage Lower cost of storage"},{"location":"ds-study/de1/structured/#data-mart","title":"Data Mart","text":"<p>Info</p> <p>Subset of Data Warehouse, optimized for specific Domain Operations: optimized Data Model (special Views, Data Subsets, etc.)</p>"},{"location":"ds-study/de1/structured/#extract-transform-load-etl","title":"Extract, Transform, Load (ETL)","text":"<p>Process of extracting Data from Source Systems and bringing it into Data Warehouse</p>"},{"location":"ds-study/de1/structured/#extract","title":"Extract","text":"<p>Batch Processing</p> <ul> <li>Creates batches of defined size/time interval</li> <li>Needs space for buffering</li> </ul> <p>Real-Time Processing</p> <ul> <li>Processes Data Item by Item continuously</li> <li>Each Item is only processed once</li> </ul> <p>Synchron Notification</p> <ul> <li>Source pushes each Data update to Data Warehouse</li> </ul> <p>Asynchron Notification</p> <ul> <li>Periodic<ul> <li>Source generates Extracts on regular Basis</li> <li>Data Warehouse prompts for updates on regular Basis</li> </ul> </li> <li>Event-Driven<ul> <li>Data Warehouse prompts for updates (e.g. end of Month)</li> </ul> </li> <li>Query-Driven<ul> <li>Data Warehouse prompts for updates before each new Data access</li> </ul> </li> </ul> <p>Type of Data</p> <ul> <li>Snapshots (Source delivers complete Data Set each Time)</li> <li>Logs (Source delivers each update Operation)</li> <li>Netlogs (Source delivers Net Updates)</li> </ul>"},{"location":"ds-study/de1/structured/#transform","title":"Transform","text":"<ul> <li>Data gets restructured to make it compliant for Data Warehouse (Data, Schema, etc.)</li> </ul>"},{"location":"ds-study/de1/structured/#load","title":"Load","text":"<p>Record Based Loading</p> <ul> <li>Trigger, Indices and Constraints can remain active</li> <li>No long Table/DB Locks</li> </ul> <p>Bulk Loading</p> <ul> <li>Is used mostly for special Context</li> <li>Complete DB/Table Locks</li> <li>Ignores Triggers and Constraints checks</li> <li>Needs Checkpoints for Resuming</li> </ul>"},{"location":"ds-study/de1/structured/#etl-vs-elt","title":"ETL vs ELT","text":"<p>ELT - Extract, Load, Transform: Variant of ETL, where Data is loaded into Data Warehouse first, and then transformed with SQL (similar like Data Lage with on-demand Processing)</p>"},{"location":"ds-study/de1/structured/#profiling","title":"Profiling","text":"<p>Info</p> <p>Content Analysis before Staging Area</p> <p>Content &amp; Structure Analysis</p> <ul> <li>Data Types</li> <li>Value Ranges</li> <li>Distribution/Variance</li> <li>Null Values</li> <li>Cardinality</li> <li>Patterns (e.g. Dates, Names, etc.)</li> </ul> <p>Dependencie Analysis Analysis betweend different Attributes and Relations</p> <ul> <li>Functional Dependencies (Primary Key Candidates)</li> <li>Integrity Constraints</li> </ul> <p>Overlap Analysis</p> <ul> <li>Redundancy</li> <li>Foreign Key Relationships</li> </ul>"},{"location":"ds-study/de1/structured/#data-cleansing","title":"Data Cleansing","text":"<p>Info</p> <p>Cleaning, normalizing, tokenizing, discretizing, standardizing, etc. of the Data</p> <p>Normalization &amp; Standardization</p> <ul> <li>Discretization (categorizing) numerical Values</li> <li>Domain specific Transformations (e.g. Adresses, Name Formats, St. to Street, etc.)</li> </ul>"},{"location":"ds-study/de1/structured/#missing-values","title":"Missing Values","text":"<p>Info</p> <p>Treating Null Values, Distortions/Noisiness (Biases)</p> <p>Recognition</p> <ul> <li>Simple Analysis (e.g. amount of Null Values, frequency, etc)</li> <li>Order Analysis (e.g. no Values in a specific Range)</li> <li>Multilated Data (e.g. ignoring Values in a specific Range)</li> <li>Recognition (e.g. Analysis of Data Distribution, Domain Knowledge, etc.)</li> </ul> <p>Treatment</p> <ul> <li>Unbiased Estimators (mean, median, standard deviation, etc.)</li> <li>Attribute Relationships (correlation, etc.)</li> <li>Statistical Techniques (linear regression, neural networks, etc.)</li> </ul>"},{"location":"ds-study/de1/unstructured/","title":"Unstructured Data for IR (Information Retrieval)","text":""},{"location":"ds-study/prog2/oop/","title":"Python Classes &amp; Objects","text":"<p>Info</p> <p>Classes are blueprints for objects. Objects are instances of classes. Classes can be used to create multiple objects.</p> <pre><code>class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n\n    def drive(self):\n        print(\"Driving a\", self.color, self.model)\n</code></pre> <pre><code>ferrari = Car(\"red\", \"Ferrari\")\naudi = Car(\"blue\", \"Audi\")\n\nferrari.drive()\naudi.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a red Ferrari\n# &gt;&gt;&gt; Driving a blue Audi\n</code></pre> <p>Important to know:</p> <ul> <li><code>self</code> is a reference to the current instance of the class</li> <li><code>self</code> comes always first in the method definition</li> <li><code>__init__</code> is the constructor of the class (see more here)</li> <li><code>__init__</code> is called when an object is created (after <code>__new__</code>)</li> <li>All classes inherit from <code>object</code> by default</li> </ul>"},{"location":"ds-study/prog2/oop/#arguments","title":"Arguments","text":""},{"location":"ds-study/prog2/oop/#optional-arguments","title":"Optional Arguments","text":"<p>Info</p> <p>Optional arguments can be used to set default values for attributes.</p> <pre><code>class Car:\ndef __init__(self, color, model, battery=0):\nself.color = color\n        self.model = model\nself.battery = battery\ndef drive(self):\n        print(\"Driving a\", self.color, self.model, \"with\", self.battery, \"kWh\")\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\ne_car = Car(\"green\", \"Tesla\", 100)\n\ncar.drive()\ne_car.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a red Ferrari with 0 kWh\n# &gt;&gt;&gt; Driving a green Tesla with 100 kWh\n</code></pre>"},{"location":"ds-study/prog2/oop/#positional-arguments","title":"Positional Arguments","text":"<p>Info</p> <p>Positional arguments can be used to set attributes in the order they are defined in the class.</p> <pre><code>class Car:\ndef __init__(self, color, model):\nself.color = color\n        self.model = model\n\n    def drive(self):\n        print(\"Driving a\", self.color, self.model)\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\ncar.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a red Ferrari with 0 kWh\n</code></pre>"},{"location":"ds-study/prog2/oop/#keyword-arguments","title":"Keyword Arguments","text":"<p>Info</p> <p>Keyword arguments can be used to set attributes in any order accessible by their keyname.</p> <pre><code>class Car:\ndef __init__(self, color, model):\nself.color = color\n        self.model = model\n\n    def drive(self):\n        print(\"Driving a\", self.color, self.model)\n</code></pre> <pre><code>car = Car(model=\"Ferrari\", color=\"red\")\ncar.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a red Ferrari with 0 kWh\n</code></pre>"},{"location":"ds-study/prog2/oop/#args-kwargs","title":"<code>*args</code> &amp; <code>**kwargs</code>","text":"<p>Info</p> <p><code>*args</code> and <code>**kwargs</code> can be used to pass a variable number of arguments to a function like a list or a dictionary.</p> <ul> <li><code>*args</code> is used to pass a variable number of positional arguments (arguments without a keyname)</li> <li><code>**kwargs</code> is used to pass a variable number of keyword arguments (arguments with a keyname)</li> </ul> <pre><code>def print_args_and_kwargs(*args, **kwargs):\nfor arg in args:\nprint(arg)\nfor key, value in kwargs.items():\nprint(key, value)\n</code></pre> <pre><code>print_args_and_kwargs(\"Hello\", \"World\", name=\"John\", age=42)\n\n# Output:\n# &gt;&gt;&gt; Hello\n# &gt;&gt;&gt; World\n# &gt;&gt;&gt; name John\n# &gt;&gt;&gt; age 42\n</code></pre>"},{"location":"ds-study/prog2/oop/#attributes","title":"Attributes","text":""},{"location":"ds-study/prog2/oop/#object-attributes","title":"Object Attributes","text":"<p>Info</p> <p>Object attributes are attributes that are defined in the <code>__init__</code> method. They are unique for each instance of the class.</p> <pre><code>class Car:\ndef __init__(self, color, model):\nself.color = color\nself.model = model\ndef drive(self):\n        print(\"Driving a\", self.color, self.model)\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\nprint(car.color)\nprint(car.model)\n\n# Output:\n# &gt;&gt;&gt; red\n# &gt;&gt;&gt; Ferrari\n</code></pre>"},{"location":"ds-study/prog2/oop/#class-attributes","title":"Class Attributes","text":"<p>Info</p> <p>Class attributes are attributes that are defined outside of the <code>__init__</code> method. They are shared between all instances of the class.</p> <pre><code>class Car:\ntotal_cars = 0\ndef __init__(self, color, model):\n        self.color = color\n        self.model = model\nCar.total_cars += 1\ndef drive(self):\n        print(\"Driving a\", self.color, self.model)\n</code></pre> <pre><code>car1 = Car(\"red\", \"Ferrari\")\ncar2 = Car(\"blue\", \"Ferrari\")\nprint(Car.total_cars)\n# Output:\n# &gt;&gt;&gt; 2\n</code></pre>"},{"location":"ds-study/prog2/oop/#semi-private-attributes","title":"Semi-Private Attributes","text":"<p>Info</p> <p>Semi-private attributes are attributes that are defined with a single underscore <code>_</code> in front of the attribute name. They can be accessed from outside the class but should not be accessed. This is just a convention for developers to know that these attributes are for internal use only.</p> <pre><code>class Car:\ndef __init__(self, color, model, secret):\nself.model = model\n        self.color = color\nself._secret = secret\ndef get_secret(self):\n        return self._secret\n\n    def set_secret(self, secret):\n        self._secret = secret\n</code></pre> <pre><code>car = Car(\"blue\", \"Ferrari\", \"secret\")\nprint(car.get_secret())\nprint(car._secret)\n\n# Output:\n# &gt;&gt;&gt; secret\n# &gt;&gt;&gt; secret\n</code></pre>"},{"location":"ds-study/prog2/oop/#private-attributes","title":"Private Attributes","text":"<p>Info</p> <p>Private attributes are attributes that are defined with a double underscore <code>__</code> in front of the attribute name. They can only be accessed from within the class. This is used to prevent accidental access from outside the class.</p> <pre><code>class Car:\n    def __init__(self, color, model, secret):\n        self.model = model\n        self.color = color\nself.__secret = secret\ndef get_secret(self):\nreturn self.__secret\ndef set_secret(self, secret):\nself.__secret = secret\n</code></pre> <pre><code>car = Car(\"blue\", \"Ferrari\", \"secret\")\nprint(car.get_secret())\nprint(car.__secret)\n\n# Output:\n# &gt;&gt;&gt; secret\n# &gt;&gt;&gt; AttributeError: 'Car' object has no attribute '__secret'\n</code></pre>"},{"location":"ds-study/prog2/oop/#property-attributes","title":"Property Attributes","text":"<p>Info</p> <p>Property attributes are attributes that are defined with the <code>@property</code> decorator. They are used to access private attributes from outside the class. By using the <code>@property</code> decorator, the private attribute can be accessed like a normal attribute. By using the <code>@attribute.setter</code> decorator, the private attribute can be modified like a normal attribute.</p> <pre><code>class Car:\n    def __init__(self, color, model, secret):\n        self.model = model\n        self.color = color\nself.__secret = secret\n@property\ndef secret(self):\n        return self.__secret\n\n@secret.setter\ndef secret(self, value):\n        self.__secret = value\n</code></pre> <pre><code>car = Car(\"blue\", \"Ferrari\", \"secret\")\ncar.secret\ncar.secret = \"new secret\"\ncar.secret\n\n# Output:\n# &gt;&gt;&gt; secret\n# &gt;&gt;&gt; new secret\n</code></pre>"},{"location":"ds-study/prog2/oop/#methods","title":"Methods","text":""},{"location":"ds-study/prog2/oop/#__new__","title":"<code>__new__</code>","text":"<p>Info</p> <p>The <code>__new__</code> method is called before an object is created. It is used to modify the object during creation.</p> <pre><code>class Car:\n    def __new__(cls, color, model):\n        if color == \"red\":\n            return super().__new__(cls)\n        else:\n            return None\n\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\ncar = Car(\"blue\", \"Ferrari\")\n\nprint(car.color)\nprint(car)\n\n# Output:\n# &gt;&gt;&gt; red\n# &gt;&gt;&gt; None\n</code></pre>"},{"location":"ds-study/prog2/oop/#__init__","title":"<code>__init__</code>","text":"<p>Info</p> <p>The <code>__init__</code> method is called when an object is created. It is used to initialize the object's attributes and methods.</p> <pre><code>class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\n\nprint(car.color)\n\n# Output:\n# &gt;&gt;&gt; red\n</code></pre>"},{"location":"ds-study/prog2/oop/#__str__-__repr__","title":"<code>__str__</code> &amp; <code>__repr__</code>","text":"<p>Info</p> <ul> <li>The <code>__str__</code> method is called when the object is printed. It should return a string representation of the object.</li> <li>The <code>__repr__</code> method is called when the object is printed in the console. It should return a string representation of the object.</li> </ul> <pre><code>class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n\n    def __str__(self):\n        return \"Car(color={}, model={})\".format(self.color, self.model)\n\n    def __repr__(self):\n        return \"Car(color={}, model={})\".format(self.color, self.model)\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\n\nprint(car) # This will call __str__\ncar # This will call __repr__\n\n# Output:\n# &gt;&gt;&gt; Car(color=red, model=Ferrari)\n# &gt;&gt;&gt; Car(color=red, model=Ferrari)\n</code></pre>"},{"location":"ds-study/prog2/oop/#abstractmethod","title":"<code>@abstractmethod</code>","text":"<p>Info</p> <p>The <code>@abstractmethod</code> decorator is used to define abstract methods. Abstract methods are methods that are not implemented in the class but must be implemented in the subclass.</p> <pre><code>from abc import ABCMeta, abstractmethod\n\nclass Car(metaclass=ABCMeta):\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n\n@abstractmethod\ndef drive(self):\npass\nclass Ferrari(Car):\ndef drive(self):\nprint(\"Driving a\", self.color, self.model)\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\n\n# Output:\n# &gt;&gt;&gt; TypeError: Can't instantiate abstract class Car with abstract methods drive\n</code></pre> <pre><code>ferrari = Ferrari(\"red\", \"Ferrari\")\nferrari.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a red Ferrari\n</code></pre>"},{"location":"ds-study/prog2/oop/#staticmethod","title":"<code>@staticmethod</code>","text":"<p>Info</p> <p>The <code>@staticmethod</code> decorator is used to define static methods. Static methods are methods that do not require an instance of the class to be called. They are usually used to create utility functions which are belonging to a class thematically.</p> <pre><code>class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n\n@staticmethod\ndef drive():\nprint(\"Driving a car\")\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\ncar.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a car\n</code></pre>"},{"location":"ds-study/prog2/oop/#classmethod","title":"<code>@classmethod</code>","text":"<p>Info</p> <p>The <code>@classmethod</code> decorator is used to define class methods. Class methods are methods that are bound to the class and not to an instance of the class. They are usually used to create factory methods which are used to create an instance of the class.</p> <pre><code>class Car:\n    total_cars = 0\n\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n        Car.total_cars += 1\n\n@classmethod\ndef get_total_cars(cls):\nreturn cls.total_cars\n</code></pre> <pre><code>car1 = Car(\"red\", \"Ferrari\")\ncar2 = Car(\"blue\", \"Ferrari\")\n\nprint(Car.get_total_cars())\n\n# Output:\n# &gt;&gt;&gt; 2\n</code></pre>"},{"location":"ds-study/prog2/oop/#concepts","title":"Concepts","text":"<p>The following concepts are important to understand object-oriented programming. They are not specific to Python. They are also used in other oop languages like Java.</p>"},{"location":"ds-study/prog2/oop/#abstraction","title":"Abstraction","text":"<p>Info</p> <p>Abstraction means that only the relevant information is shown to the user. The user does not need to know the internal details of the object.</p> <pre><code>class Car:\n    def __init__(self, color, model, key):\n        self.color = color\n        self.model = model\n        self.__key = key\n\n    def drive(self):\n        if self.__key == True:\n            print(\"Driving a\", self.color, self.model)\n        else:\n            print(\"You need the correct key to drive this car\")\n\n    def get_key(self):\n        return self.__key\n\n    def set_key(self, key):\n        self.__key = key\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\", True)\n\ncar.drive()\ncar.set_key(False)\ncar.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a red Ferrari\n# &gt;&gt;&gt; You need the correct key to drive this car\n</code></pre>"},{"location":"ds-study/prog2/oop/#encapsulation","title":"Encapsulation","text":"<p>Info</p> <p>Encapsulation means that the internal representation of an object is hidden from the outside. Only the object itself can access and modify its internal state.</p> <pre><code>class Car:\n    def __init__(self, color, model):\n        self.__color = color\n        self.__model = model\n\n    def drive(self):\n        print(\"Driving a\", self.__color, self.__model)\n\n    def get_color(self):\n        return self.__color\n\n    def set_color(self, color):\n        self.__color = color\n</code></pre> <pre><code>car = Car(\"yellow\", \"VW\")\n\ncar.drive()\ncar.set_color(\"orange\")\ncar.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a yellow VW\n# &gt;&gt;&gt; Driving a orange VW\n</code></pre>"},{"location":"ds-study/prog2/oop/#inheritance","title":"Inheritance","text":"<p>Info</p> <p>Classes can inherit from other classes. The child class inherits all attributes and methods from the parent class.</p> <p>Warning</p> <p>Methods and attributes can be overwritten in the child class. The parent class is not affected.</p> <pre><code>class ElectricCar(Car):\n    def __init__(self, color, model, battery):\n        super().__init__(color, model)\n        self.battery = battery\n\n    def charge(self):\n        print(\"Charging\", self.color, self.model, \"with\", self.battery, \"kWh\")\n</code></pre> <pre><code>car = ElectricCar(\"green\", \"Tesla\", 100)\ncar.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a green Tesla with 100 kWh\n</code></pre>"},{"location":"ds-study/prog2/oop/#polymorphism","title":"Polymorphism","text":"<p>Info</p> <p>Polymorphism means that the same method can be used for different types of objects. The method will behave differently depending on the type of object.</p> <pre><code>class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n\n    def drive(self):\n        print(\"Driving a\", self.color, self.model)\n\nclass ElectricCar(Car):\n    def __init__(self, color, model, battery):\n        super().__init__(color, model)\n        self.battery = battery\n\n    def drive(self):\n        print(\"Driving a\", self.color, self.model, \"with\", self.battery, \"kWh\")\n</code></pre> <pre><code>car = Car(\"red\", \"Ferrari\")\ne_car = ElectricCar(\"green\", \"Tesla\", 100)\n\ncar.drive()\ne_car.drive()\n\n# Output:\n# &gt;&gt;&gt; Driving a red Ferrari\n# &gt;&gt;&gt; Driving a green Tesla with 100 kWh\n</code></pre>"},{"location":"ds-study/prog2/pandas/","title":"Pandas","text":"<p>Info</p> <p>Pandas is a Python library for data analysis and manipulation. It provides data structures and functions to work with structured data like CSV files, Excel sheets or SQL tables.</p>"},{"location":"ds-study/prog2/pandas/#load-save-data","title":"Load &amp; Save Data","text":"<pre><code>import pandas as pd\n\n# Load data\ndf = pd.read_csv(\"data.csv\", sep=\";\", encoding=\"utf-8\")\ndf = pd.read_excel(\"data.xlsx\", sheet_name=\"Sheet1\", engine=\"openpyxl\")\n\n# Save data\ndf.to_csv(\"data.csv\", sep=\";\", encoding=\"utf-8\", index=False)\n</code></pre> <p>Note:</p> <ul> <li><code>sep</code> is the separator used in the CSV file (default is <code>,</code>)</li> <li><code>encoding</code> is the encoding used in the CSV file (default is <code>utf-8</code>)<ul> <li><code>utf-8</code></li> <li><code>latin-1</code></li> <li>see here for a list of all encodings</li> </ul> </li> </ul> <p>Web</p> <pre><code>import pandas as pd\n\nurl = \"https://example.com/data.csv\"\ndf = pd.read_csv(url, sep=\";\", encoding=\"utf-8\")\n</code></pre> <p>SQL</p> <pre><code>import pandas as pd\nimport sqlite3\n\nconn = sqlite3.connect(\"data.db\")\ndf = pd.read_sql_query(\"SELECT * FROM data\", conn)\n</code></pre>"},{"location":"ds-study/prog2/pandas/#column-operations","title":"Column Operations","text":"<p>Select Columns</p> <pre><code>df2 = df[[\"column1\", \"column2\"]]\n</code></pre> <p>Drop Columns</p> <pre><code>df = df.drop(columns=[\"column1\", \"column2\"])\n</code></pre> <p>Rename Column</p> <pre><code>df = df.rename(columns={\"old\": \"new\"})\n</code></pre> <p>Apply to Column</p> <pre><code>df[\"column\"] = df[\"column\"].apply(lambda x: x + 1)\n</code></pre> <p>Add Columns</p> <pre><code>df[\"new\"] = df[\"column1\"] + df[\"column2\"]\n</code></pre> <p>Remove Duplicates</p> <pre><code>df = df.drop_duplicates(subset=\"column\")\n</code></pre>"},{"location":"ds-study/prog2/pandas/#row-operations","title":"Row Operations","text":"<p>Filter Rows</p> <pre><code>df = df[df[\"column\"] &gt; 10]\n</code></pre> <p>Group Rows</p> <pre><code>df = df.groupby(\"column\").sum()\n</code></pre> <p>Sort Rows</p> <pre><code>df = df.sort_values(\"column\", ascending=False)\n</code></pre> <p>Select Rows and Columns</p> <pre><code>df = df.loc[df[\"column\"] &gt; 10, [\"column1\", \"column2\"]]\n</code></pre> <p>Iterate over Rows</p> <pre><code>for index, row in df.iterrows():\n    print(index, row[\"column1\"], row[\"column2\"])\n</code></pre>"},{"location":"ds-study/prog2/requests/","title":"Requests","text":"<p>Info</p> <p>Requests is a Python library for HTTP requests. It is used to send HTTP requests to a server and receive a response. There is also an inbuilt library called <code>urllib</code> for the same purpose but a little bit more complicated to use.</p>"},{"location":"ds-study/prog2/requests/#get-request","title":"Get Request","text":"requestsurllib <pre><code>import requests\n\nresponse = requests.get(\"https://example.com\")\nprint(response.status_code)\nprint(response.text)\n\n# Output:\n# &gt;&gt;&gt; 200\n# &gt;&gt;&gt; &lt;!doctype html&gt;\n# &gt;&gt;&gt; &lt;html&gt;\n# &gt;&gt;&gt; &lt;head&gt;\n# &gt;&gt;&gt; &lt;title&gt;Example Domain&lt;/title&gt;\n# &gt;&gt;&gt; ...\n</code></pre> <pre><code>import urllib.request\n\nresponse = urllib.request.urlopen(\"https://example.com\")\nprint(response.status)\nprint(response.read().decode(\"utf-8\"))\n\n# Output:\n# &gt;&gt;&gt; 200\n# &gt;&gt;&gt; &lt;!doctype html&gt;\n# &gt;&gt;&gt; &lt;html&gt;\n# &gt;&gt;&gt; &lt;head&gt;\n# &gt;&gt;&gt; &lt;title&gt;Example Domain&lt;/title&gt;\n# &gt;&gt;&gt; ...\n</code></pre>"},{"location":"ds-study/prog2/requests/#get-save-file","title":"Get &amp; Save File","text":"requestsurllib <pre><code>import requests\n\nresponse = requests.get(\"https://example.com/example.csv\")\nwith open(\"example.csv\", \"wb\") as file:\n    file.write(response.content)\n</code></pre> <pre><code>import urllib.request\n\nresponse = urllib.request.urlopen(\"https://example.com/example.csv\")\nwith open(\"example.csv\", \"wb\") as file:\n    file.write(response.read())\n</code></pre>"},{"location":"ds-study/prog2/sorting/","title":"Sorting Algorithms","text":"<p>Tip</p> <p>Check out this sorting algorithm visualizer: https://visualgo.net/en/sorting</p>"},{"location":"ds-study/prog2/sorting/#insertion-sort","title":"Insertion Sort","text":"<p>Info</p> <p>Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. 1</p> <pre><code>def insertion_sort(array):\n    for i in range(1, len(array)):\n        key = array[i]\n        j = i - 1\n        while j &gt;= 0 and key &lt; array[j]:\n            array[j + 1] = array[j]\n            j -= 1\n        array[j + 1] = key\n</code></pre> <pre><code>array = [5, 2, 4, 6, 1, 3]\ninsertion_sort(array)\n\nprint(array)\n\n# Output:\n# &gt;&gt;&gt; [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"ds-study/prog2/sorting/#quick-sort","title":"Quick Sort","text":"<p>Info</p> <p>Quicksort is an efficient sorting algorithm. It is a divide and conquer algorithm. 2</p> <pre><code>def partition(array, low, high):\n    pivot = array[high]\n    i = low - 1\n\n    for j in range(low, high):\n        if array[j] &lt; pivot:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n\n    array[i + 1], array[high] = array[high], array[i + 1]\n    return i + 1\n\ndef quick_sort(array, low, high):\n    if low &lt; high:\n        pi = partition(array, low, high)\n        quick_sort(array, low, pi - 1)\n        quick_sort(array, pi + 1, high)\n</code></pre> <pre><code>array = [5, 2, 4, 6, 1, 3]\nquick_sort(array, 0, len(array) - 1)\nprint(array)\n\n# Output:\n# &gt;&gt;&gt; [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"ds-study/prog2/sorting/#divide-conquer","title":"Divide &amp; Conquer","text":"<p>Info</p> <p>Divide and conquer is an algorithm design paradigm based on multi-branched recursion. A divide-and-conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly. Then the solutions of the sub-problems can be combined to solve the original problem. 3</p> <ol> <li> <p>https://www.programiz.com/dsa/insertion-sort \u21a9</p> </li> <li> <p>https://www.geeksforgeeks.org/python-program-for-quicksort/ \u21a9</p> </li> <li> <p>https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm \u21a9</p> </li> </ol>"},{"location":"ds-study/prog2/standards/","title":"Internet Standards &amp; Encodings","text":""},{"location":"ds-study/prog2/standards/#url-encoding","title":"URL Encoding","text":"<pre><code>b'Dor\\xc3\\xa9naz'.decode(\"utf-8\")\n\n# Output:\n# &gt;&gt;&gt; 'Dor\u00e9naz'\n</code></pre> <pre><code>import urllib.parse as urlparse\nurlparse.quote(\"%*\")\n# Output:\n# &gt;&gt;&gt; '%25%2A'\n\nurlparse.urlencode({\"name\": \"Dor\u00e9naz\"})\n# Output:\n# &gt;&gt;&gt; 'name=Dor%C3%A9naz'\n</code></pre>"},{"location":"ds-study/prog2/standards/#date-time-formats","title":"Date &amp; Time Formats","text":"Name Format Example UNIX Time <code>int</code> 1571081990 ISO 8601 <code>YYYY-MM-DD hh:mm:ss.ss</code> 2019-10-14T12:33:10+00:00 RFC 3339 <code>YYYY-MM-DDThh:mm:ss.sssZ</code> 2019-10-14T12:33:10.000Z RFC (2)822/5322 <code>ddd, DD MMM YYYY hh:mm:ss +zzzz</code> Mon, 14 Oct 2019 12:33:10 +0000 RFC 7231 <code>ddd, DD MMM YYYY hh:mm:ss GMT</code> Mon, 14 Oct 2019 12:33:10 GMT"},{"location":"ds-study/prog2/standards/#http-uri","title":"HTTP &amp; URI","text":""},{"location":"ds-study/prog2/standards/#uri-formats","title":"URI Formats","text":"Name Example URI / URL <code>https://www.example.com:8080/path/to/resource?query=string#fragment</code> IRI / IRL <code>http://localhost/api/products/\u062a\u0644\u0641\u0627\u0632</code> URI Template (RFC 6570) <code>https://www.example.com/{version}/path/to/{resource}</code> Ressource Formats <code>html</code>, <code>json</code>, <code>yaml</code>, <code>xml</code>, <code>binary</code>, <code>text</code>"},{"location":"ds-study/prog2/standards/#http-methods","title":"HTTP Methods","text":"Name Description GET Requests a representation of the specified resource POST Submits data to be processed to the specified resource PUT Uploads a representation of the specified resource DELETE Deletes the specified resource"},{"location":"ds-study/prog2/standards/#http-status-codes","title":"HTTP Status Codes","text":"<p>Scheme:</p> Code Name Description 1xx Informational Request received, continuing process 2xx Success The action was successfully received, understood, and accepted 3xx Redirection Further action must be taken in order to complete the request 4xx Client Error The request contains bad syntax or cannot be fulfilled 5xx Server Error The server failed to fulfill an apparently valid request <p>Most common:</p> Code Name Description 100 Continue The server has received the request headers, and the client should proceed 200 OK Standard response for successful HTTP requests 201 Created The request has been fulfilled, resulting in the creation of a new resource 202 Accepted The request has been accepted for processing, but the processing has not been completed 400 Bad Request The server cannot or will not process the request due to an apparent client error 404 Not Found The requested resource could not be found but may be available in the future ... ... ..."},{"location":"ds-study/prog2/testing/","title":"Testing","text":"<p>Info</p> <p>Testing is the process of evaluating a system or its component(s) with the intent to find whether it satisfies the specified requirements or not.</p> <p>Widely used testing frameworks for Python:</p> <ul> <li>unittest</li> <li>pytest</li> <li>nose</li> </ul>"},{"location":"ds-study/prog2/testing/#unit-testing","title":"Unit Testing","text":"<p>Info</p> <p>Unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit for use.</p> <pre><code>def add(x, y):\n    return x + y\n</code></pre> <pre><code>import unittest\n\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n        self.assertEqual(add(1, 3), 4)\n        self.assertEqual(add(1, 4), 5)\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>"},{"location":"ds-study/prog2/testing/#mocking","title":"Mocking","text":"<p>Info</p> <p>Mocking is a process used in unit testing when the unit being tested has external dependencies. The purpose of mocking is to isolate and focus on the code being tested and not on the behavior or state of external dependencies.</p> <pre><code>import unittest\nfrom unittest.mock import patch\n\ndef add(x, y):\n    return x + y\n\nclass TestAdd(unittest.TestCase):\n    @patch(\"__main__.add\")\n    def test_add(self, mock_add):\n        mock_add.return_value = 5\n        self.assertEqual(add(1, 2), 5)\n        self.assertEqual(add(1, 3), 5)\n        self.assertEqual(add(1, 4), 5)\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>"},{"location":"ds-study/prog2/testing/#coverage","title":"Coverage","text":"<p>Info</p> <p>Code coverage is a measure used to describe the degree to which the source code of a program is tested by a particular test suite.</p> <pre><code>def add(x, y):\n    if x &gt; 0:\n        return x + y\n    else:\n        return y\n</code></pre> <pre><code>import unittest\nimport coverage\n\ncov = coverage.Coverage()\ncov.start()\n\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n        self.assertEqual(add(1, 3), 4)\n        self.assertEqual(add(1, 4), 5)\n\nif __name__ == \"__main__\":\n    unittest.main()\n    cov.stop()\n    cov.save()\n    cov.report()\n</code></pre>"},{"location":"ds-study/prog2/testing/#non-functional-testing","title":"Non-Functional Testing","text":"<p>Info</p> <p>Non-functional testing is the testing of a software application or system for its non-functional requirements: the way a system operates, rather than specific behaviours of that system.</p> <ul> <li>Execution Time</li> <li>System Resources (CPU, Memory, Disk, Network)</li> <li>Refactoring (lines of code, cyclomatic complexity, syntax complexity)</li> </ul>"},{"location":"general-notes/git/","title":"git","text":"<p>Git is a version control system for tracking changes in computer files and coordinating work on those files among multiple people.</p> <p>Note</p> <p>VS Code has a built-in Git support. You can use it to manage your repositories without using the command line.</p>"},{"location":"general-notes/git/#most-used-commands","title":"Most used commands","text":"<p>Get latest changes from remote repository:</p> <pre><code>git pull\n</code></pre> <p>Note</p> <p>Use <code>--rebase</code> flag to rebase local changes on top of remote changes.</p> <p>Add new file to index:</p> <pre><code>git add &lt;file&gt;\n</code></pre> <p>Note</p> <p>You can add all files in current directory with <code>git add .</code> or <code>git add -a</code></p> <p>Danger</p> <p><code>-f</code> flag is used to force all files to be added to the index also if they are ignored by <code>.gitignore</code> file.</p> <p>Commit changes:</p> <pre><code>git commit -a -m \"Commit message\"\n</code></pre> <p>Note</p> <p>You can use <code>git commit -a</code> to commit all changes in tracked files.</p> <p>If you want to commit only a specific file, you can use <code>git commit -a &lt;file&gt; -m \"Commit message\"</code></p>"},{"location":"general-notes/git/#other-useful-commands","title":"Other useful commands","text":"<p>Note</p> <p>To leave the vim editor, type <code>:q</code> and press enter.</p> <p>Show status of tracked files:</p> <pre><code>git status\n</code></pre> <p>Show changes in tracked files:</p> <pre><code>git diff\n</code></pre> <p>Show changes/tracked/untracked of local files:</p> <pre><code>git status\n</code></pre> <p>Show commit history:</p> <pre><code>git log\n</code></pre> git log options <p>You can also filter the log:</p> Command Description <code>--author=&lt;author&gt;</code> Show commits by author <code>--grep=&lt;string&gt;</code> Show commits with message containing string <code>--since=&lt;date&gt;</code> Show commits after date <code>--until=&lt;date&gt;</code> Show commits before date <code>--oneline</code> Show commits in one line <code>--graph</code> Show commits as a graph"},{"location":"general-notes/git/#branch","title":"branch","text":"<p>Create new branch:</p> <pre><code>git branch &lt;branch name&gt;\n</code></pre> <p>Switch to branch:</p> <pre><code>git checkout &lt;branch name&gt;\n</code></pre> <p>Merge branch into main:</p> <pre><code>git checkout &lt;main branch&gt;\ngit merge &lt;branch name&gt;\n</code></pre>"},{"location":"general-notes/git/#staging","title":"staging","text":"<p>This is the area where you see tracked files that are not yet committed.</p>"},{"location":"general-notes/git/#init-git-push-to-remote-origin","title":"Init git &amp; push to remote origin","text":"<pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Initial commit\"\n</code></pre> <pre><code>git remote add origin &lt;remote repository url&gt;\n</code></pre> <pre><code>git push -u origin master\n</code></pre>"},{"location":"general-notes/graphs/","title":"Graphs","text":"<p>Graphs are a data structures which represent a set of nodes and edges connecting them. They are used to represent relationships between objects. Graphs are used in many fields, such as social networks, transportation networks, and computer networks.</p>"},{"location":"general-notes/graphs/#undirected-graphs","title":"Undirected Graphs","text":"<p>Undirected graphs are graphs where the edges do not have a direction. This means that if there is an edge between two nodes, then there is also an edge between those nodes in the opposite direction.</p> <pre><code>graph LR\n    A((Node A)) --- B((Node B))\n    A --- C((Node C))\n    A --- D((Node D))\n    C --- D</code></pre>"},{"location":"general-notes/graphs/#directed-graphs","title":"Directed Graphs","text":"<p>Directed graphs are graphs where the edges have a direction. This means that if there is an edge between two nodes, then there is not necessarily an edge between those nodes in the opposite direction.</p> <pre><code>graph LR\n    A((Node A)) --&gt; B((Node B))\n    A --&gt; C((Node C))\n    B --&gt; C\n    C --&gt; D((Node D))\n    D --&gt; A</code></pre>"},{"location":"general-notes/graphs/#weighted-graphs","title":"Weighted Graphs","text":"<p>Weighted graphs are graphs where the edges have a weight. This means that each edge has a value associated with it. This value can be used to represent the cost of traversing the edge.</p> <pre><code>graph LR\n    A((A))---|2|B((B));\n    A--&gt;|5|C((C));\n    B--&gt;|1|C;\n    B---|3|D((D));\n    C--&gt;|4|D;</code></pre>"},{"location":"general-notes/graphs/#binary-trees","title":"Binary Trees","text":"<p>Binary trees are a type of tree where each node has at most two children. These children are referred to as the left child and the right child.</p> <pre><code>graph TD\n    A((A))---B((B));\n    A--&gt;C((C));\n    B--&gt;D((D));\n    B---E((E));\n    C--&gt;F((F));</code></pre>"},{"location":"general-notes/mkdocs-material/","title":"MkDocs Material","text":"<p>Is a theme for MkDocs that provides a clean and responsive design. It is based on the Material Design guidelines by Google. MkDocs is a static site generator that is geared towards building project documentation. It is written in Python and uses Markdown to create pages.</p> <p>Info</p> <ul> <li>MkDocs Material Setup</li> <li>MkDocs Material Reference</li> </ul> <p>Are pretty good resources for learning how to use MkDocs and MkDocs Material.</p>"},{"location":"general-notes/mkdocs-material/#admonitions","title":"Admonitions","text":"<pre><code>!!! tip \"Title\"\n\n    Some content\n</code></pre> <p>Title</p> <p>Some content</p>"},{"location":"general-notes/mkdocs-material/#available-tags","title":"Available Tags","text":"Tag Icon Description <code>note</code> General note <code>abstract</code> Summary of content <code>info</code> Informational note <code>tip</code> Helpful tip <code>success</code> Successful operation <code>question</code> Question <code>warning</code> Warning <code>failure</code> Failed operation <code>danger</code> Danger <code>bug</code> Bug notice <code>example</code> Example for illustration <code>quote</code> Quote"},{"location":"general-notes/mkdocs-material/#code-blocks","title":"Code Blocks","text":"<pre><code>```bash title=\"bash\"\necho \"Hello World\"\n```\n</code></pre> bash<pre><code>echo \"Hello World\"\n</code></pre>"},{"location":"general-notes/mkdocs-material/#multi-tabbed-code-blocks","title":"Multi Tabbed Code Blocks","text":"<pre><code>=== 'python'\n\n    ```python\n    print(\"Hello World\")\n    ```\n\n=== 'javascript'\n\n    ```javascript\nconsole.log(\"Hello World\")\n    ```\n</code></pre> PythonJS <pre><code>print(\"Hello World\")\n</code></pre> <pre><code>console.log(\"Hello World\")\n</code></pre>"},{"location":"general-notes/mkdocs-material/#mermaid","title":"Mermaid","text":"<pre><code>```mermaid\ngraph LR\n    A[Hard] --&gt;|Text| B(Round)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result 1]\n    C --&gt;|Two| E[Result 2]\n```\n</code></pre> <pre><code>graph LR\n    A[Hard] --&gt;|Text| B(Round)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result 1]\n    C --&gt;|Two| E[Result 2]</code></pre>"},{"location":"general-notes/mkdocs-material/#math","title":"Math","text":"<pre><code>$$\n\\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}}\n$$\n</code></pre> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]"},{"location":"math/","title":"Math","text":"<p>This section contains a collection of my personal math notes written in <code>LaTeX</code> (downloadable as a PDF).</p> <ul> <li>General</li> <li>Linear Algebra</li> <li>Analysis</li> </ul> <p></p> <p>Warning</p> <ul> <li>The notes are only meant for personal use!</li> <li>Publishing, distributing, or selling the notes is explicitly prohibited!</li> <li>The notes were made in german, there is no english version available.</li> <li>I don't share the source code of this notes.</li> <li>I do not take any responsibility for any mistakes or errors in the notes.</li> </ul>"},{"location":"math/analysis/","title":"Analysis","text":"Analysis ANA1 ANA1_Differential v23.6.7 Show Download ANA1_FolgenReihen v23.6.7 Show Download ANA1_Integral v23.6.7 Show Download ANA1_Kurvendiskusion v23.6.7 Show Download ANA1_Polynomfunktionen v23.6.7 Show Download ANA2 ANA2_DifferentialGleichungen v23.6.7 Show Download ANA2_ErweitertesIntegral v23.6.7 Show Download ANA2_Taylorreihe v23.6.7 Show Download <p>         This release was auto generated \ud83d\ude80 at         2023-06-19 15:01:52.719206 UTC by [github-actions         ./scripts/math_pdf.py]. Do not edit this file, changes will be         overwritten. If there is a problem with this release, create a new issue         (bug report \ud83d\udc1b)     </p>"},{"location":"math/general/","title":"General","text":"General Allgemein Allgemein v23.6.7 Show Download <p>         This release was auto generated \ud83d\ude80 at         2023-06-19 15:01:52.719317 UTC by [github-actions         ./scripts/math_pdf.py]. Do not edit this file, changes will be         overwritten. If there is a problem with this release, create a new issue         (bug report \ud83d\udc1b)     </p>"},{"location":"math/linear-algebra/","title":"Linear Algebra","text":"Linear Algebra LA1 LA1_AnalytischeGeometrie1 v23.6.7 Show Download LA1_AnalytischeGeometrie2 v23.6.7 Show Download LA1_Determinanten v23.6.7 Show Download LA1_LineareGleichungssysteme v23.6.7 Show Download LA1_Matritzen v23.6.7 Show Download LA1_Vektoren v23.6.7 Show Download LA2 LA2_Eigenvektoren v23.6.7 Show Download LA2_KomplexeZahlen v23.6.7 Show Download LA2_LinAbbildungen v23.6.7 Show Download LA2_Vektorraum v23.6.7 Show Download <p>         This release was auto generated \ud83d\ude80 at         2023-06-19 15:01:52.719278 UTC by [github-actions         ./scripts/math_pdf.py]. Do not edit this file, changes will be         overwritten. If there is a problem with this release, create a new issue         (bug report \ud83d\udc1b)     </p>"},{"location":"overview/ideas-upcoming-projects/","title":"Ideas &amp; Upcoming Projects","text":"Status Icons Reference <p> Idea is in draft stage</p> <p> Idea is in implementation stage</p> <p> Updating/Reworking an existing idea</p> <p> Idea is completed</p> <p> Idea is rejected</p> Title Description Category Status Hungarian Algorithm Theory &amp; Implementation of the Hungarian algorithm in Python Algorithms/Coding NN from Scratch Implementing a Neural Network from scratch in Python Machine Learning Matrices Theory &amp; Implementation of Matrices in Python Math O(n) Big O Notation Theory and testing Algorithms/Coding Graph Theory Theory &amp; Implementation of Graph Theory in Python Algorithms/Coding <p> </p>"},{"location":"overview/urls-resources/","title":"Links and Resources","text":""},{"location":"overview/urls-resources/#general","title":"General","text":"Name Description Url QR-Code Generator Custom QR-Code generator with Style https://qr-code-styling.com/ svgrepo.com Free customizable SVG-Icons https://www.svgrepo.com/"},{"location":"overview/urls-resources/#github","title":"Github","text":"Name Description Url shields.io Badges for your GitHub Repository https://shields.io/"},{"location":"overview/urls-resources/#computer-vision-image-processing","title":"Computer Vision &amp; Image Processing","text":"Name Description Url homogeneous coordinates Visual and interactive Guide https://wordsandbuttons.online"},{"location":"webdev/angular/","title":"Angular","text":"<p>Angular1 is a framework for building client applications in HTML, CSS and TypeScript.</p> <p>It works with:</p> <ul> <li>Modules</li> <li>Components (with templates)</li> <li>Injectors/Services</li> </ul>"},{"location":"webdev/angular/#concept","title":"Concept","text":"<p>Angular Concept of Modules, Components and Injectors2</p> <ol> <li> <p>Angular \u21a9</p> </li> <li> <p>Angular Concept s\u00a0\u21a9</p> </li> </ol>"},{"location":"webdev/angular/angular-libraries/","title":"Angular First-Party Libraries","text":"Library Description Docs <code>Angular Router</code> Advanced client-side navigation and routing based on Angular components. Angular Router <code>Angular Forms</code> Uniform system for form participation and validation. Angular Forms <code>Angular HttpClient</code> Robust HTTP client that can power more advanced client-server communication. Angular HttpClient <code>Angular Animations</code> Rich system for driving animations based on application state. Angular Animations <code>Angular PWA</code> Tools for building Progressive Web Applications (PWA) including a service worker and Web application manifest. Angular PWA <code>Angular Schematics</code> Automated scaffolding, refactoring, and update tools that simplify development at large scale. Angular Schematics"},{"location":"webdev/angular/angular-libraries/#angular-router","title":"Angular Router","text":"<ul> <li>Reference</li> </ul> <pre><code>ng generate module app-routing --flat --module=app\n</code></pre> app.module.ts.component.html <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n{ path: 'home', component: HomeComponent },\n{ path: '', redirectTo: '/home', pathMatch: 'full'},\n{ path: '**', component: PageNotFoundComponent}\n];\n\n@NgModule({\nimports:      [ BrowserModule, RouterModule.forRoot(routes) ],\ndeclarations: [ AppComponent, HomeComponent ],\nbootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n</code></pre> <pre><code>&lt;nav&gt;\n    &lt;a routerLink=\"/\"&gt;Home&lt;/a&gt;\n    &lt;a routerLink=\"/about\"&gt;About&lt;/a&gt;\n&lt;/nav&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre>"},{"location":"webdev/angular/angular-libraries/#angular-forms","title":"Angular Forms","text":"<ul> <li>Reference</li> </ul> Form Control Description <code>reactive forms</code> provide direct, explicit access to underlying form object model: more robust, more scalable, reusable, testable <code>template-driven forms</code> rely on directives in template to create/manipulate underlying object: adding simple form to app, straightforward to add to an app, doesn't scale as well as reactive forms"},{"location":"webdev/angular/angular-libraries/#reactive-forms","title":"Reactive Forms","text":"<ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>import { FormGroup, FormControl } from '@angular/forms';\n\n...\n\nexport class Reactive {\nForm = new FormGroup({\nfirstName: new FormControl(''),\nlastName: new FormControl(''),\n});\n}\n</code></pre> <pre><code>&lt;form [formGroup]=\"Form\" (ngSubmit)=\"onSubmit()\"&gt;\n\n&lt;label for=\"first-name\"&gt;First Name: &lt;/label&gt;\n&lt;input id=\"first-name\" type=\"text\" formControlName=\"firstName\"&gt;\n\n&lt;label for=\"last-name\"&gt;Last Name: &lt;/label&gt;\n&lt;input id=\"last-name\" type=\"text\" formControlName=\"lastName\"&gt;\n\n&lt;/form&gt;\n</code></pre>"},{"location":"webdev/angular/angular-libraries/#template-driven-forms","title":"Template-Driven Forms","text":"<ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>import { Component } from '@angular/core';\n\n@Component({\nselector: 'app-template',\ntemplateURL: 'template.component.html',\n})\n\nexport class Template{\nform = '';\n}\n</code></pre> <pre><code>&lt;input type=\"text\" [formControl]=\"form\"&gt;\n</code></pre>"},{"location":"webdev/angular/components/","title":"Angular Components","text":"<p>Note</p> <p>Components are small building blocks.</p> <ul> <li>Reference</li> </ul>"},{"location":"webdev/angular/components/#general","title":"General","text":"<p>Create a component:</p> <pre><code>ng generate component &lt;component-name&gt;\n</code></pre> .component.ts.component.html.component.cssComponent Call <pre><code>import { Component } from \"@angular/core\";\n\n@Component({\nselector: \"hello-world\",\ntemplateUrl: \"hello-world.component.html\",\nstyleUrls: [\"hello-world.component.css\"],\n})\nexport class HelloWorldComponent {\n// The code in this class drives the component's behavior.\n}\n</code></pre> <pre><code>&lt;h2&gt;Hello World&lt;/h2&gt;\n&lt;p&gt;This is my first component!&lt;/p&gt;\n&lt;p class=\"a\"&gt;Hello!&lt;/p&gt;\n</code></pre> .component.css<pre><code>h2 {\ncolor: blue;\n}\n.a {\nmargin: 10px;\n}\n</code></pre> other.component.html<pre><code>&lt;app-hello-world&gt;&lt;/app-hello-world&gt;\n</code></pre>"},{"location":"webdev/angular/components/#interpolation","title":"Interpolation","text":"<p>Note</p> <p>Displaying <code>variables</code> in the html template <code>{{ variable }}</code></p> <ul> <li>Reference</li> </ul> .component.ts.component.htmlOutput <pre><code>import { Component } from \"@angular/core\";\n\n@Component({\nselector: \"hello-world-interpolation\",\ntemplateUrl: \"./hello-world-interpolation.component.html\",\n})\nexport class HelloWorldInterpolationComponent {\nmessage = \"Hello, World!\";\n}\n</code></pre> <pre><code>&lt;h2&gt;{{ message }}&lt;/h2&gt;\n</code></pre> <pre><code>&lt;h2&gt;Hello, World!&lt;/h2&gt;\n</code></pre>"},{"location":"webdev/angular/components/#data-pipes","title":"Data Pipes","text":"<p>Note</p> <p>Data pipes are used to transform <code>strings</code> in the html template <code>{{ variable | pipe }}</code></p> <ul> <li>Reference</li> </ul> Pipe Description <code>DatePipe</code> formats a date value <code>UpperCasePipe</code> transforms text to upper case <code>LowerCasePipe</code> transforms text to lower case <code>CurrencyPipe</code> formats a number as currency <code>DecimalPipe</code> formats a number as decimal <code>PercentPipe</code> formats a number as percent .component.ts.component.htmlOutput <pre><code>import { Component } from \"@angular/core\";\n\n@Component({\nselector: \"hello-world-pipes\",\ntemplateUrl: \"./hello-world-pipes.component.html\",\n})\nexport class HelloWorldPipesComponent {\ntoday = new Date();\nprice = 1.23;\npercent = 0.456;\n}\n</code></pre> <pre><code>&lt;h2&gt;{{ today | date }}&lt;/h2&gt;\n&lt;p&gt;{{ price | currency }}&lt;/p&gt;\n&lt;p&gt;{{ percent | percent }}&lt;/p&gt;\n</code></pre> <pre><code>&lt;h2&gt;2021-03-01&lt;/h2&gt;\n&lt;p&gt;$1.23&lt;/p&gt;\n&lt;p&gt;45.6%&lt;/p&gt;\n</code></pre>"},{"location":"webdev/angular/components/#custom-data-pipes","title":"Custom Data Pipes","text":"<pre><code>ng generate pipe &lt;pipe-name&gt;\n</code></pre> pipe-name.pipe.ts<pre><code>import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'exponentialStrength})\nexport class ExponentialStrengthPipe implements PipeTransform {\ntransform(value: number, exponent = 1): number {\nreturn Math.pow(value, exponent);\n}\n}\n</code></pre>"},{"location":"webdev/angular/components/#property-binding","title":"Property Binding","text":"<p>Note</p> <p>Binding <code>properties</code> from the html template <code>[property]=\"variable\"</code></p> <ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>...\nexport class HelloWorldBindingsComponent {\nfontColor = 'blue';\nsayHelloId = 1;\n}\n</code></pre> <pre><code>&lt;p\n    [id]=\"sayHelloId\"\n    [style.color]=\"fontColor\"&gt;\n    You can set color in the component!\n&lt;/p&gt;\n</code></pre>"},{"location":"webdev/angular/components/#event-binding","title":"Event Binding","text":"<p>Note</p> <p>Binding <code>events</code> from the html template <code>(event)=\"function\"</code></p> <ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>...\nexport class HelloWorldBindingsComponent {\ncanClick = false;\nmessage = 'Hello, World';\nsayMessage() {\nalert(this.message);\n}\n}\n</code></pre> <pre><code>&lt;button\n    type=\"button\"\n    [disabled]=\"canClick\"\n    (click)=\"sayMessage()\"&gt;\n    Trigger alert message\n&lt;/button&gt;\n</code></pre>"},{"location":"webdev/angular/dependency-injection/","title":"Angular Dependency Injection","text":"<p>Note</p> <p>Dependency Injection is a design pattern that separates dependencies of a class from its environment. It is used to provide services, components and dependencies. DI containers create instances of dependencies.</p> <ul> <li>Reference</li> </ul>"},{"location":"webdev/angular/dependency-injection/#service","title":"Service","text":"<pre><code>ng generate service &lt;service-name&gt;\n</code></pre> .service.ts.component.ts.module.ts <pre><code>@Injectable({\nprovidedIn: 'root',\n})\nclass Service {}\n</code></pre> <p>Note: <code>providedIn: 'root'</code> is used to make the service available to the entire application as Singleton Instance.</p> <pre><code>@Component({\nselector: 'component',\ntemplate: '...',\nproviders: [Service]\n})\nclass ComponentClass {}\n</code></pre> <pre><code>@NgModule({\ndeclarations: [ComponentClass],\nimports: [CommonModule],\nproviders: [Service]\n})\nclass ModuleClass {}\n</code></pre>"},{"location":"webdev/angular/directives/","title":"Angular Directives","text":"<p>Note</p> <p>Classes that add additional behavior to an element</p> <ul> <li>Reference</li> </ul>"},{"location":"webdev/angular/directives/#ngclass","title":"NgClass","text":"<p>Note</p> <p>Adds and removes CSS classes on an HTML element.</p> <ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>...\nexport class ngClassComponent {\nthis.isSpecial = true;\n}\n</code></pre> <pre><code>&lt;div [ngClass]=\"isSpecial ? 'special' : ''\"&gt;\n    This div is special\n&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#ngstyle","title":"NgStyle","text":"<p>Note</p> <p>Adds and removes styles inline on an HTML element.</p> <ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>...\nexport class ngStyleComponent {\nthis.currentSyles = {\n'font-style' : this.canSave   ? 'italic' : 'normal',\n'font-weight': this.isSpecial ? 'bold'   : 'normal'\n};\n}\n</code></pre> <pre><code>&lt;div [ngStyle]=\"currentStyles\"&gt;\n    This div is special\n&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#ngmodel","title":"NgModel","text":"<p>Note</p> <p>Displays and updates the properties of a data-bound object.</p> <ul> <li>Reference</li> </ul> app.module.ts.component.html <pre><code>import { FormsModule } from '@angular/forms';\n...\nimports: [\nBrowserModule,\nFormsModule // &lt;--- import into the NgModule\n],\n...\n</code></pre> <pre><code>&lt;label for=\"example-ngModel\"&gt;\n    [(ngModel)]:\n&lt;/label&gt;\n&lt;input\n    [(ngModel)]=\"currentItem.name\"\n    (ngModelChange)=\"setUppercaseName($event)\"\n    id=\"example-ngModel\"\n&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#structural-directives","title":"Structural Directives","text":"<p>Note</p> <p>Shape and reshape the DOM's structure, by adding, removing, and manipulating elements.</p> <ul> <li>Reference</li> </ul>"},{"location":"webdev/angular/directives/#ngif","title":"NgIf","text":"<pre><code>&lt;app-item-detail *ngIf=\"isActive\" [item]=\"item\"&gt; &lt;/app-item-detail&gt;\n\n&lt;div *ngIf=\"nullCustomer\"&gt;Hello, &lt;span&gt;{{nullCustomer}}&lt;/span&gt;&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#ngfor","title":"NgFor","text":"<pre><code>&lt;div *ngFor=\"let item of items\"&gt;{{item.name}}&lt;/div&gt;\n&lt;app-item-detail *ngFor=\"let item of items\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n&lt;!-- with index --&gt;\n&lt;div *ngFor=\"let item of items; let i=index\"&gt;{{i + 1}} - {{item.name}}&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#ngswitch","title":"NgSwitch","text":"<pre><code>&lt;div [ngSwitch]=\"currentItem.feature\"&gt;\n    &lt;app-stout-item\n        *ngSwitchCase=\"'stout'\"\n        [item]=\"currentItem\"\n    &gt;&lt;/app-stout-item&gt;\n    &lt;app-device-item\n        *ngSwitchCase=\"'slim'\"\n        [item]=\"currentItem\"\n    &gt;&lt;/app-device-item&gt;\n    &lt;app-lost-item\n        *ngSwitchCase=\"'vintage'\"\n        [item]=\"currentItem\"\n    &gt;&lt;/app-lost-item&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/modules/","title":"Angular Modules","text":"<p>Note</p> <p>Angular Modules are containers with different purposes</p> <ul> <li>Reference</li> </ul> <p>Create a module:</p> <pre><code>ng generate module &lt;module-name&gt;\n</code></pre> module-name.module.ts<pre><code>import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\nimports:      [ BrowserModule ],\nproviders:    [ Logger ],\ndeclarations: [ AppComponent ],\nexports:      [ AppComponent ],\nbootstrap:    [ AppComponent ]\n})\nexport class &lt;module-name&gt; { }\n</code></pre>"},{"location":"webdev/angular/testing/","title":"Angular Testing","text":"<p>Info</p> <ul> <li>Test files need to be named with the <code>.spec.ts</code> extension.</li> <li>Also it is recommended to place test files in same directory as the file being tested.</li> <li>Reference</li> </ul> <pre><code>ng test &lt;project-name&gt;\n</code></pre> <p>Create custom config <code>karma.conf.js</code>:</p> <pre><code>ng generate config karma\n</code></pre>"},{"location":"webdev/angular/testing/#continuous-integration-ci","title":"Continuous Integration (CI)","text":"<ul> <li>Reference</li> </ul> <pre><code>ng test --no-watch --no-progress\n</code></pre>"},{"location":"webdev/css/","title":"CSS","text":"<p>Note</p> <p>CSS is a language for describing the presentation of a Webpage. It can handle: - Fonts - Colors - Layout - Style - Animations - etc.</p>"},{"location":"webdev/css/#add-css-to-html","title":"Add CSS to HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Other Methods:</p> <ul> <li>Internal CSS - CSS in the <code>&lt;head&gt;</code> tag with <code>&lt;style&gt;</code> tags</li> <li>Inline CSS - CSS in the HTML element with the <code>style</code> attribute</li> </ul>"},{"location":"webdev/css/#css-selectors","title":"CSS Selectors","text":"<pre><code>div {\ncolor: green;\nfont-size: 2em;\n}\n\n.class {\ncolor: red;\nfont-size: 2em;\n}\n\n#id {\ncolor: blue;\nfont-size: 1em;\n}\n</code></pre> <p>Note</p> <p>CSS Styles can applied to HTML elements, classes, IDs, and more. It can also be applied to a specific element in a specific hierarchy.</p>"},{"location":"webdev/css/box-model/","title":"CSS Box Model","text":"<pre><code>div {\nwidth: 100px;\nheight: 100px;\npadding: 10px;\nborder: 1px solid black;\nmargin: 10px;\n}\n</code></pre>"},{"location":"webdev/css/box-model/#margins","title":"Margins","text":"<pre><code>div {\nmargin: 10px;\n}\n</code></pre> <p>Note</p> <p>Margin is the space outside the border.</p>"},{"location":"webdev/css/box-model/#padding","title":"Padding","text":"<pre><code>div {\npadding: 10px;\n}\n</code></pre> <p>Note</p> <p>Padding is the space inside the border.</p>"},{"location":"webdev/css/box-model/#borders","title":"Borders","text":"<pre><code>div {\nborder: 1px solid black;\nborder-top: 5px solid black;\nborder-radius: 5px;\n}\n</code></pre> <ol> <li> <p>CSS Box Model \u21a9</p> </li> </ol>"},{"location":"webdev/css/common-properties/","title":"CSS Common Properties","text":""},{"location":"webdev/css/common-properties/#units","title":"Units","text":"<pre><code>div {\nfont-size: 1rem;\nwidth: 100px;\nheight: 100vh;\n}\n</code></pre>"},{"location":"webdev/css/common-properties/#absolute-lengths","title":"Absolute Lengths","text":"<ul> <li><code>cm</code> - centimeters</li> <li><code>mm</code> - millimeters</li> <li><code>in</code> - inches</li> <li><code>px</code> - pixels</li> </ul>"},{"location":"webdev/css/common-properties/#relative-lengths","title":"Relative Lengths","text":"<ul> <li><code>em</code> - relative to the font-size of the element (2em means 2 times the size of the current font)</li> <li><code>rem</code> - relative to font-size of the root element</li> <li><code>vw</code> - relative to 1% of the width of the viewport</li> <li><code>vh</code> - relative to 1% of the height of the viewport</li> <li><code>%</code> - relative to the parent element</li> <li><code>ch</code> - relative to the width of the \"0\" (zero)</li> </ul>"},{"location":"webdev/css/common-properties/#psuedo-classes1","title":"Psuedo-classes1","text":"<p>Note</p> <p>Psuedo-classes are used to define a special state of an element.</p> <pre><code>div:hover {\nbackground-color: red;\n}\n</code></pre>"},{"location":"webdev/css/common-properties/#psuedo-elements2","title":"Psuedo-elements2","text":"<p>Note</p> <p>Psuedo-elements are used to style specified parts of an element.</p> <pre><code>tr:nth-child(even) {\nbackground-color: #f2f2f2;\n}\n</code></pre> <ul> <li><code>:first-child</code> - selects the first child element of a parent element</li> <li><code>(even|odd|n)</code> - selects even, odd or every n-th elements</li> </ul>"},{"location":"webdev/css/common-properties/#colors","title":"Colors","text":"<pre><code>div {\ncolor: green;\ncolor: #00ff00;\ncolor: rgb(0, 255, 0);\ncolor: rgba(0, 255, 0, 0.5);\ncolor: hsl(120, 100%, 50%);\ncolor: hsla(120, 100%, 50%, 0.5);\ncolor: transparent;\n}\n</code></pre> <ul> <li><code>green</code> - named colors</li> <li><code>#00ff00</code> - hex colors</li> <li><code>rgb(0, 255, 0)</code> - rgb colors</li> <li><code>rgba(0, 255, 0, 0.5)</code> - rgba colors with alpha (transparency)</li> <li><code>hsl(120, 100%, 50%)</code> - hsl colors</li> <li><code>hsla(120, 100%, 50%, 0.5)</code> - hsla colors with alpha (transparency)</li> </ul>"},{"location":"webdev/css/common-properties/#background","title":"Background","text":"<pre><code>div {\nbackground-color: blue;\nbackground-image: url(\"image.jpg\");\nbackground-repeat: no-repeat;\nbackground-attachment: fixed;\nbackground-position: center;\nbackground: blue url(\"image.jpg\") no-repeat fixed center; /* shorthand */\n}\n</code></pre>"},{"location":"webdev/css/common-properties/#fonts-text-properties","title":"Fonts &amp; Text Properties","text":"<pre><code>div {\nfont-family: \"Times New Roman\", Times, serif;\nfont-size: 16px;\nfont-style: italic;\nfont-weight: bold;\n}\n</code></pre> <ul> <li><code>font-family</code> - font family, fallbacks and specification<ul> <li><code>serif</code> - serif fonts</li> <li><code>sans-serif</code> - sans-serif fonts</li> <li><code>monospace</code> - monospace fonts</li> </ul> </li> </ul>"},{"location":"webdev/css/common-properties/#alignment","title":"Alignment","text":"<pre><code>div {\ntext-align: left;\n}\n</code></pre> <p>Options:</p> <ul> <li><code>left</code></li> <li><code>right</code></li> <li><code>center</code></li> <li><code>justify</code></li> </ul>"},{"location":"webdev/css/common-properties/#other-properties","title":"Other Properties","text":"<pre><code>div {\ntext-transform: uppercase;\ntext-decoration: underline;\ntext-indent: 50px;\ntext-shadow: 2px 2px 5px black;\nletter-spacing: 2px;\nword-spacing: 2px;\nline-height: 2;\nwhite-space: nowrap;\n}\n</code></pre> <ol> <li> <p>Psuedo-classes \u21a9</p> </li> <li> <p>Psuedo-elements \u21a9</p> </li> </ol>"},{"location":"webdev/css/selectors/","title":"CSS Selectors","text":""},{"location":"webdev/css/selectors/#element-selector","title":"Element Selector","text":"<pre><code>div {\ncolor: green;\nfont-size: 2em;\n}\n</code></pre>"},{"location":"webdev/css/selectors/#class-selector","title":"Class Selector","text":"<pre><code>.class {\ncolor: red;\nfont-size: 2em;\n}\n</code></pre>"},{"location":"webdev/css/selectors/#id-selector","title":"ID Selector","text":"<pre><code>#id {\ncolor: blue;\nfont-size: 1em;\n}\n</code></pre>"},{"location":"webdev/css/selectors/#universal-selector","title":"Universal Selector","text":"<pre><code>* {\ncolor: green;\nfont-size: 2em;\n}\n</code></pre> <p>Note</p> <p>The universal selector selects all HTML elements.</p>"},{"location":"webdev/css/selectors/#advanced-selectors","title":"Advanced Selectors","text":"<p>Note: All Selector Patterns can be found at w3schools.com.</p>"},{"location":"webdev/css/selectors/#grouping-selector","title":"Grouping Selector","text":"<pre><code>div,\np {\ncolor: green;\nfont-size: 2em;\n}\n</code></pre>"},{"location":"webdev/css/selectors/#descendant-selector","title":"Descendant Selector","text":"<pre><code>div p {\ncolor: green;\nfont-size: 2em;\n}\n</code></pre> <p>Note</p> <p>Styles are only applied to the last element which are in the hierarchy.</p>"},{"location":"webdev/css/selectors/#attribute-selector","title":"Attribute Selector","text":"<pre><code>&lt;a href=\"www.google.com\"&gt;Google&lt;/a&gt;\n&lt;a href=\"www.google.com\" target=\"_blank\"&gt;Google&lt;/a&gt;\n</code></pre> <pre><code>a[target] {\ncolor: green;\n}\n\na[target=\"_blank\"] {\ncolor: red;\n}\n</code></pre> <ul> <li><code>[attribute]</code> selects all elements with this attribute name</li> <li><code>[attribute=\"value\"]</code> selects all elements with this attribute name and value</li> <li><code>[attribute~=\"value\"]</code> selects all elements with this attribute name and value (separated by spaces)</li> </ul> <p>Note: More Patterns can be found at w3schools.com.</p>"},{"location":"webdev/css/structured-content/","title":"CSS Structured Content","text":""},{"location":"webdev/css/structured-content/#links1","title":"Links1","text":"<pre><code>&lt;a href=\"https://www.w3schools.com\"&gt;This is a link&lt;/a&gt;\n</code></pre> <pre><code>a {\ncolor: blue;\ntext-decoration: none;\ncursor: pointer;\n}\n</code></pre> <ul> <li><code>a:link</code> - unvisited link</li> <li><code>a:visited</code> - visited link</li> <li><code>a:hover</code> - mouse over link</li> <li><code>a:active</code> - selected link</li> </ul>"},{"location":"webdev/css/structured-content/#lists2","title":"Lists2","text":"<pre><code>&lt;ul&gt;\n    &lt;li&gt;a&lt;/li&gt;\n    &lt;li&gt;b&lt;/li&gt;\n    &lt;li&gt;c&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <ul> <li><code>ul</code> - unordered list</li> <li><code>ol</code> - ordered list</li> </ul> <pre><code>ul {\nlist-style-type: square;\n}\n</code></pre>"},{"location":"webdev/css/structured-content/#tables3","title":"Tables3","text":"<pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;A&lt;/th&gt;\n        &lt;th&gt;B&lt;/th&gt;\n        &lt;th&gt;C&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;1&lt;/td&gt;\n        &lt;td&gt;2&lt;/td&gt;\n        &lt;td&gt;3&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <pre><code>table {\nborder-collapse: collapse;\nwidth: 100%;\n}\n\nth,\ntd {\nborder: 1px solid #ddd;\npadding: 8px;\n}\n\nth {\npadding-top: 12px;\npadding-bottom: 12px;\ntext-align: left;\nbackground-color: #4caf50;\ncolor: white;\n}\n\ntr:nth-child(even) {\nbackground-color: #f2f2f2;\n}\n\ntr:hover {\nbackground-color: #ddd;\n}\n</code></pre>"},{"location":"webdev/css/structured-content/#forms","title":"Forms","text":""},{"location":"webdev/css/structured-content/#images","title":"Images","text":""},{"location":"webdev/css/structured-content/#iframes","title":"Iframes","text":"<ol> <li> <p>CSS Links \u21a9</p> </li> <li> <p>CSS Lists \u21a9</p> </li> <li> <p>CSS Tables \u21a9</p> </li> </ol>"},{"location":"webdev/html/","title":"HTML","text":"<p>Note</p> <p>HTML is a language for describing the structure of a Webpage. It can handle:</p> <ul> <li>Headings</li> <li>Paragraphs</li> <li>Lists</li> <li>Images</li> <li>Links</li> <li>etc.</li> </ul>"},{"location":"webdev/html/#basic-html","title":"Basic HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Page Title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Heading&lt;/h1&gt;\n        &lt;p&gt;Paragraph&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"webdev/html/common-elements/","title":"HTML Common Elements","text":""},{"location":"webdev/html/common-elements/#headings","title":"Headings","text":"<pre><code>&lt;h1&gt;Heading 1&lt;/h1&gt;\n&lt;h2&gt;Heading 2&lt;/h2&gt;\n&lt;h3&gt;Heading 3&lt;/h3&gt;\n</code></pre> <ul> <li><code>h1</code> - defines the most important heading</li> <li><code>hx</code> - defines a heading where <code>x</code> is the heading level (1-6)</li> </ul>"},{"location":"webdev/html/common-elements/#sections","title":"Sections","text":"<pre><code>&lt;section&gt;\n    &lt;h1&gt;Section Heading&lt;/h1&gt;\n    &lt;p&gt;Section Content&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"webdev/html/common-elements/#paragraphs","title":"Paragraphs","text":"<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;\n</code></pre>"},{"location":"webdev/html/common-elements/#links","title":"Links","text":"<pre><code>&lt;a href=\"https://www.google.com\"&gt;Google&lt;/a&gt;\n</code></pre> <ul> <li><code>href</code> - defines the link destination (URL)</li> <li>use <code>target=\"_blank\"</code> to open the link in a new tab</li> </ul>"},{"location":"webdev/html/common-elements/#images","title":"Images","text":"<pre><code>&lt;img src=\"./path\" alt=\"Image 1\" /&gt;\n</code></pre>"},{"location":"webdev/html/common-elements/#divisions-divs-html-containers","title":"Divisions (Divs | HTML Containers)","text":"<pre><code>&lt;div&gt;\n    &lt;h1&gt;Division Heading&lt;/h1&gt;\n    &lt;p&gt;Division Content&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Info</p> <p>Divs are used to group elements together. They are not semantic elements, so they do not convey any meaning to the browser.</p>"},{"location":"webdev/html/meta-tags/","title":"HTML Meta Tags","text":"<p>Info</p> <p>Meta Tags are used to provide information about the document to the browser (data about the data).</p>"},{"location":"webdev/html/meta-tags/#meta-tags","title":"Meta Tags","text":"<pre><code>&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" /&gt;\n    &lt;meta name=\"description\" content=\"Website Description\" /&gt;\n    &lt;meta name=\"keywords\" content=\"HTML, CSS, JavaScript\" /&gt;\n    &lt;meta name=\"author\" content=\"John Doe\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n&lt;/head&gt;\n</code></pre> <ul> <li><code>charset</code> - defines the character encoding for the HTML document</li> <li><code>http-equiv</code> - provides an HTTP header for the information/value of the content attribute (advanced!)<ul> <li><code>refresh</code> - refreshes the page after a specified time</li> </ul> </li> <li><code>description</code> - provides a description of the page</li> <li><code>keywords</code> - provides keywords for search engines</li> <li><code>author</code> - provides the name of the author of the document</li> <li><code>viewport</code> - specifies the width and scaling of the viewport</li> </ul>"},{"location":"webdev/html/meta-tags/#other-elements-in-the-header","title":"Other Elements in the Header","text":"<pre><code>&lt;head&gt;\n    &lt;title&gt;Page Title&lt;/title&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"./favicon.ico\" /&gt;\n&lt;/head&gt;\n</code></pre> <ul> <li><code>title</code> - defines the title of the document (displayed in the browser tab)</li> <li><code>favicon</code> - defines a small icon for the document (displayed in the browser tab)</li> </ul>"},{"location":"webdev/javascript/","title":"JavaScript","text":"<p>Info</p> <p>JavaScript is a programming language that adds interactivity to your website. This happens in the browser, and it is the main language for the web.</p> <p>Embed JavaScript in HTML using the <code>&lt;script&gt;</code> tag.</p> <pre><code>&lt;script type=\"text/javascript\" src=\"./main.js\"&gt;\n// code or in imported file\nconsole.log(\"test\")\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>Embed Script:</p> <ul> <li><code>&lt;head&gt;</code> tag to load before DOM content</li> <li><code>&lt;body&gt;</code>-end tag to load after DOM content (if it needs to access DOM elements)</li> </ul>"},{"location":"webdev/javascript/#installation","title":"Installation","text":"<ul> <li>Node.js</li> </ul> <p>New Project/Packages init:</p> <pre><code>npm init\n</code></pre> <p>Package Installation:</p> <pre><code>npm install &lt;package-name&gt;\n</code></pre>"},{"location":"webdev/javascript/#packagejson","title":"package.json","text":"<pre><code>{\n\"name\": \"new-project\",\n\"version\": \"1.0.0\",\n\"description\": \"This is a new-project\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n\"dev\": \"parcel index.html\",\n\"build\": \"parcel build index.html\"\n},\n\"repository\": {\n\"type\": \"git\",\n\"url\": \"www.github.com/user/repository\"\n},\n\"keywords\": [\"keyword1\", \"keyword2\"],\n\"author\": \"author\",\n\"license\": \"GPL-3.0\",\n\"dependencies\": {\n\"chart.js\": \"^4.2.1\",\n\"express\": \"^4.18.2\"\n},\n\"devDependencies\": {\n\"parcel\": \"^2.8.3\"\n}\n}\n</code></pre>"},{"location":"webdev/javascript/#run-scripts","title":"run scripts","text":"<pre><code>npm run &lt;script-name&gt;\n</code></pre>"},{"location":"webdev/javascript/#run-js-in-terminal","title":"run js in terminal","text":"<pre><code>node &lt;file-name&gt;\n</code></pre>"},{"location":"webdev/javascript/classes/","title":"JavaScript Classes","text":"DeclarationAnonymous ClassExpression <pre><code>class Rectangle {\nconstructor(height, width) {\nthis.height = height;\nthis.width = width;\nthis.area = this.calcArea();\n}\nget area() {\nreturn this.calcArea();\n}\ncalcArea() {\nreturn this.height * this.width;\n}\n}\n</code></pre> <pre><code>const Rectangle = class {\nconstructor(height, width) {\nthis.height = height;\nthis.width = width;\nthis.area = this.calcArea();\n}\nget area() {\nreturn this.calcArea();\n}\ncalcArea() {\nreturn this.height * this.width;\n}\n};\n</code></pre> <pre><code>const Rectangle = class Rectangle {\nconstructor(height, width) {\nthis.height = height;\nthis.width = width;\nthis.area = this.calcArea();\n}\nget area() {\nreturn this.calcArea();\n}\ncalcArea() {\nreturn this.height * this.width;\n}\n};\n</code></pre>"},{"location":"webdev/javascript/classes/#instance","title":"Instance","text":"<pre><code>const rect = new Rectangle(10, 20);\nconsole.log(rect.area); // 200\n</code></pre>"},{"location":"webdev/javascript/classes/#general-class-structure","title":"General Class Structure","text":"<pre><code>class ClassName {\ninstanceField;\nstatic staticField;\n#privateField;\nstatic #privateStaticField;\n\nconstructor(value) {\nthis.property = value;\nthis.#privateProperty = value;\n}\nget property() {\nreturn this.property;\n}\nset property(value) {\nthis.property = value;\n}\nmethod(parameter) {\n// code with this.* and parameter\n}\nstatic method(parameter) {\n// code withouth this.*\n}\n#privateMethod() {\n// code with this.* and parameter\n}\n}\n</code></pre> <ul> <li><code>instanceField</code> is a field accessible from all instances of the class</li> <li><code>constructor()</code> method which builds the class instance</li> <li><code>get</code> and <code>set</code> methods for properties (accessors)</li> <li><code>static</code> methods and fields are only accessible from the class itself <code>ClassName.method()</code></li> </ul>"},{"location":"webdev/javascript/classes/#class-inheritance","title":"Class Inheritance","text":"<pre><code>class A {\nconstructor(value) {\nthis.a = value;\n}\nmethodA() {\nconsole.log(\"A\");\n}\n}\n\nclass B extends A {\nconstructor(value1, value2) {\nsuper(value1);\nthis.b = value2;\n}\nmethodB() {\nconsole.log(\"B\");\n}\n}\n</code></pre>"},{"location":"webdev/javascript/error-handling/","title":"JavaScript Error Handling","text":"<pre><code>try {\n// code that may throw an error\nthrow new Error(\"Error message\"); // throw a custom error\n} catch (err) {\n// code to handle the error\n} finally {\n// code to be executed regardless of the error at the end\n}\n</code></pre> <ul> <li><code>try</code> - code that may throw an error</li> <li><code>catch</code> - code to handle the error</li> <li><code>finally</code> - code to that will be executed at the end of the <code>try</code> block</li> <li><code>throw new Error(\"Error message\")</code> - throw a custom error</li> </ul>"},{"location":"webdev/javascript/error-handling/#debugging","title":"Debugging","text":"<ul> <li><code>console.log()</code> - print to the console</li> <li><code>debugger;</code> - stop execution and call debugging function</li> </ul>"},{"location":"webdev/javascript/functions/","title":"JavaScript Functions","text":"<pre><code>function add(a, b = 0) {\nlet x = 1;\nreturn a + b;\n}\n\nlet sum = add(1, 2); // sum = 3\n</code></pre> <ul> <li><code>a</code> and <code>b</code> are parameters</li> <li><code>b = 0</code> defines a default parameter</li> <li><code>let x</code> is a local variable and is not accessible outside the function</li> </ul> <p>Info</p> <ul> <li>Function declaration is hoisted to the top of the scope.</li> <li>Accessing <code>add</code> without <code>()</code> returns the function object and not the result   <pre><code>  let sum = add\nlet result = sum(1, 2) // result = 3\n</code></pre></li> </ul>"},{"location":"webdev/javascript/functions/#default-parameters","title":"Default Parameters","text":"<pre><code>function add(a = 0, b = 0) {\nreturn a + b;\n}\n</code></pre>"},{"location":"webdev/javascript/functions/#rest-parameters","title":"Rest Parameters","text":"<pre><code>function add(...numbers) {\nlet sum = 0;\nfor (let number of numbers) {\nsum += number;\n}\nreturn sum;\n}\n</code></pre>"},{"location":"webdev/javascript/functions/#this-in-functions","title":"<code>this</code> in Functions","text":"<pre><code>const person = {\nname: \"John\",\nage: 30,\ngreet: function () {\nconsole.log(`Hello, my name is ${this.name}`);\n},\n};\n\nperson.greet(); // Hello, my name is John\n</code></pre> <ul> <li><code>this</code> refers to the object that called the function</li> <li><code>bind</code>, <code>call</code> and <code>apply</code> can be used to change the <code>this</code> value</li> </ul>"},{"location":"webdev/javascript/functions/#arrow-function","title":"Arrow Function","text":"<pre><code>let add = (a, b) =&gt; a + b;\nlet sum = add(1, 2); // sum = 3\n</code></pre>"},{"location":"webdev/javascript/functions/#js-default-functions","title":"JS Default Functions","text":"<ul> <li><code>alert()</code> - displays an alert box with a message and an OK button</li> <li><code>console.log()</code> - writes a message to the console</li> <li><code>eval()</code> - evaluates a string as a JavaScript expression</li> <li><code>isFinite()</code> - determines whether a number is finite</li> <li><code>isNaN()</code> - determines whether a value is NaN</li> <li><code>parseFloat()</code> - parses a string and returns a floating point number</li> <li><code>encodeURI()</code> - encodes a URI</li> <li><code>decodeURI()</code> - decodes a URI</li> <li><code>setTimeout()</code> - calls a function after a specified number of milliseconds</li> <li><code>setInterval()</code> - calls a function repeatedly, after a specified number of     milliseconds</li> </ul>"},{"location":"webdev/javascript/loops-iterations/","title":"JavaScript Loops &amp; Iteration","text":""},{"location":"webdev/javascript/loops-iterations/#for-loop","title":"for-Loop","text":"<pre><code>for (var i = 0; i &lt; 10; i++) {\n// code\n}\n</code></pre>"},{"location":"webdev/javascript/loops-iterations/#for-in-loop","title":"for in Loop","text":"<pre><code>var object = {\nkey1: \"value1\",\nkey2: 12,\n};\n\nfor (var key in object) {\nconsole.log(key + \": \" + object[key]);\n}\n</code></pre>"},{"location":"webdev/javascript/loops-iterations/#while-loop","title":"while-Loop","text":"<pre><code>var i = 0;\nwhile (i &lt; 10) {\n// code\ni++;\n}\n</code></pre>"},{"location":"webdev/javascript/loops-iterations/#do-while-loop","title":"do while-Loop","text":"<pre><code>var i = 0;\ndo {\n// code\ni++;\n} while (i &lt; 10);\n</code></pre> <p>Difference between while and do while</p> <p>The <code>do while</code> loop will always execute at least once, even if the condition is false.</p>"},{"location":"webdev/javascript/loops-iterations/#break-continue","title":"Break &amp; Continue","text":"<pre><code>for (var i = 0; i &lt; 10; i++) {\nif (i == 5) {\nbreak; // stop &amp; exit loop\n}\nif (i == 3) {\ncontinue; // skip rest of iteration\n}\n// code\n}\n</code></pre>"},{"location":"webdev/javascript/operators-conditionals/","title":"JavaScript Operators &amp; Conditionals","text":""},{"location":"webdev/javascript/operators-conditionals/#if-condition","title":"if-Condition","text":"<pre><code>if (condition) {\n// code\n} else if (condition) {\n// code\n} else {\n// code\n}\n</code></pre>"},{"location":"webdev/javascript/operators-conditionals/#switch-condition","title":"switch-Condition","text":"<pre><code>switch (expression) {\ncase \"value1\":\n// code\nbreak;\ncase \"value2\"\ncase \"value3\":\n// code\nbreak;\ndefault:\n// code\n}\n</code></pre>"},{"location":"webdev/javascript/operators-conditionals/#logical-operators","title":"Logical Operators","text":"operator description example <code>var x = 5; var y = 10</code> &amp;&amp; and <code>x &lt; 10 &amp;&amp; y &gt; 9 -&gt; true</code> || or <code>x &lt; 10</code> || <code>y &gt; 15 -&gt; true</code> ! not <code>!(x == y) -&gt; true</code>"},{"location":"webdev/javascript/operators-conditionals/#boolean-operators","title":"Boolean Operators","text":"operator description example <code>var x = 5;</code> == equal (value) <code>x == \"5\" -&gt; true</code> === strictly equal (value &amp; type) <code>x === 5 -&gt; true</code> != not equal (value) <code>x != 8 -&gt; true</code> !== not strictly equal (value or type) <code>x !== \"5\" -&gt; true</code> &gt; greater than <code>x &gt; 8 -&gt; false</code> &lt; less than <code>x &lt; 8 -&gt; true</code> &gt;= greater than or equal <code>x &gt;= 8 -&gt; false</code> &lt;= less than or equal <code>x &lt;= 5 -&gt; true</code>"},{"location":"webdev/javascript/var-datatypes/","title":"JavaScript Variables &amp; Datatypes","text":""},{"location":"webdev/javascript/var-datatypes/#datatypes","title":"Datatypes","text":"<pre><code>var x; // undefined\nvar x = 5; // number\nvar x = 3.14; // number\nvar x = \"Test\"; // string\nvar x = [\"Test\", \"Test2\"]; // array\nvar x = true; // boolean\nvar x = null; // null\n</code></pre>"},{"location":"webdev/javascript/var-datatypes/#objects","title":"Objects","text":"<pre><code>// object\nvar object = {\nkey1 \"value1\",\nkey2: 12,\ntotal: function() {\nreturn this.key1 + this.key2;\n}\n};\n\nobject.key1 = \"new value\"; // change value\nobject[key2]++; // increment key2\ntotal = object.total(); // call function\n</code></pre>"},{"location":"webdev/javascript/var-datatypes/#variable-scopes","title":"Variable Scopes","text":"type scope redeclare update hoisting hoisting init var global/function/local top of scope <code>undefined</code> let block top of scope const block top of scope"},{"location":"webdev/javascript/var-datatypes/#var","title":"var","text":"<ul> <li><code>var</code> can be redeclared and updated (global/function/local scoped)</li> </ul> <pre><code>var x = 10; // var Variable\n\nfunction test() {\nvar y = 20;\nvar x = y;\nconsole.log(x); // 20\n}\n</code></pre>"},{"location":"webdev/javascript/var-datatypes/#let","title":"let","text":"<ul> <li><code>let</code> can't be redeclared but updated (block scoped)</li> </ul> <pre><code>let x = 10; // let Variable\n\nlet x = 20; // error can't redeclare\nx = 20; // update\n\nfunction test() {\nlet x = 20; // no error because function scoped\n}\n</code></pre>"},{"location":"webdev/javascript/var-datatypes/#const","title":"const","text":"<ul> <li><code>const</code> can't be redeclared or updated (block scoped)</li> </ul> <pre><code>const x = 10; // const Variable\n\nconst x = 20; // error can't redeclare\nx = 20; // error can't update\n\nfunction test() {\nconst x = 20; // no error because function scoped\n}\n</code></pre> <ul> <li>Objects and Arrays can be updated</li> </ul> <pre><code>const object = {\nkey1: \"value1\",\nkey2: 12,\n};\n\nobject.key1 = \"new value\"; // no error\n</code></pre>"}]}