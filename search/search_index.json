{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Brain Cache!","text":"<p>Welcome to JohnTrunix's Brain Cache, my personal go-to hub for tech-savvy personal notes and insights.</p> <p>On this page, I document my acquired knowledge and store it as a personal library. You'll find various theoretical aspects, code documentation, and even side projects when I have the time and energy to work on them. This page is constantly being expanded.</p> <p></p> <p>Note</p> <p>This page is a work in progress. I'm constantly adding new content and updating old content if I find time for it. If you find any errors or have any suggestions, please let me know!</p> <p>Disclaimer</p> <p>This page is not meant to be a complete guide or reference for any of the topics I cover. It is simply a personal notebook for me to store my own notes and insights. I do not guarantee that the information on this page is correct or up-to-date but I will try to keep it as accurate as possible.</p> <p>Contributions and Sense of this page</p> <p>If you're interested in contributing something, please let me know first so we can discuss it. I want to keep this site as my own personal notebook and not get too carried away with other people's ideas. </p>"},{"location":"algorithms/graphs/","title":"Graphs","text":"<p>Graphs are a data structures which represent a set of nodes and edges connecting them. They are used to represent relationships between objects. Graphs are used in many fields, such as social networks, transportation networks, and computer networks.</p>"},{"location":"algorithms/graphs/#undirected-graphs","title":"Undirected Graphs","text":"<p>Undirected graphs are graphs where the edges do not have a direction. This means that if there is an edge between two nodes, then there is also an edge between those nodes in the opposite direction.</p> <pre><code>graph LR\n    A((Node A)) --- B((Node B))\n    A --- C((Node C))\n    A --- D((Node D))\n    C --- D</code></pre>"},{"location":"algorithms/graphs/#directed-graphs","title":"Directed Graphs","text":"<p>Directed graphs are graphs where the edges have a direction. This means that if there is an edge between two nodes, then there is not necessarily an edge between those nodes in the opposite direction.</p> <pre><code>graph LR\n    A((Node A)) --&gt; B((Node B))\n    A --&gt; C((Node C))\n    B --&gt; C\n    C --&gt; D((Node D))\n    D --&gt; A</code></pre>"},{"location":"algorithms/graphs/#weighted-graphs","title":"Weighted Graphs","text":"<p>Weighted graphs are graphs where the edges have a weight. This means that each edge has a value associated with it. This value can be used to represent the cost of traversing the edge.</p> <pre><code>graph LR\n    A((A))---|2|B((B));\n    A--&gt;|5|C((C));\n    B--&gt;|1|C;\n    B---|3|D((D));\n    C--&gt;|4|D;</code></pre>"},{"location":"algorithms/graphs/#binary-trees","title":"Binary Trees","text":"<p>Binary trees are a type of tree where each node has at most two children. These children are referred to as the left child and the right child.</p> <pre><code>graph TD\n    A((A))---B((B));\n    A--&gt;C((C));\n    B--&gt;D((D));\n    B---E((E));\n    C--&gt;F((F));</code></pre>"},{"location":"coding/golang/","title":"Go","text":"<p>Code Review Comments: CodeReviewComments golang/go</p>"},{"location":"coding/golang/#installation-setup","title":"Installation &amp; Setup","text":"<p>Installation instructions: golang.org/doc/install</p>"},{"location":"coding/golang/#environment-variables","title":"Environment Variables","text":"<pre><code>setx GOPATH %USERPROFILE%\\go\nsetx path \"%path%;%USERPROFILE%\\bin\"\n</code></pre>"},{"location":"coding/golang/#important-packages","title":"Important Packages","text":"<p>Adnvanced Formatter</p> <pre><code>go install golang.go/x/tools/cmd/goimports@latest\n</code></pre> <p>Linter</p> <pre><code>go install golang.org/x/lint/golint@latest\n</code></pre>"},{"location":"coding/golang/commands/","title":"Go Commands","text":""},{"location":"coding/golang/commands/#build-compile-run","title":"Build / Compile / Run","text":"<p>Compile, execute and delete the binary:</p> <pre><code>go run main.go\n</code></pre> <p>Build binary:</p> <pre><code>go build main.go\n</code></pre> <p>Note</p> <p>Rename binary with <code>-o &lt;name&gt;</code> flag:</p> <p>Run binary:</p> <pre><code>./main\n</code></pre> <p>Download Packages:</p> <pre><code>go install github.com/rakyll/hey@latest\n</code></pre> <p>Note</p> <p>Change Version with <code>@&lt;version&gt;</code></p>"},{"location":"coding/golang/commands/#linting-formatting","title":"Linting / Formatting","text":"<p>Format Code:</p> <pre><code>go fmt\n</code></pre> <p>Group Imports:</p> <pre><code>goimports -l -w\n</code></pre> <p>Lint Code:</p> <pre><code>golint ./...\n</code></pre> <p>Vet Code:</p> <p>Syntax is correct but may have other issues</p> <pre><code>go vet ./...\n</code></pre> <p>All in one Linting:</p> <pre><code>golangci-lint run\n</code></pre> <p>Note</p> <p>This is a wrapper for many linters and can check code in parallel</p> <p>Guide</p>"},{"location":"coding/golang/types/","title":"Go Datatypes","text":"<p>Info</p> <p>Every not declared <code>variable</code> is 0 by default!</p>"},{"location":"coding/golang/types/#literals","title":"Literals","text":"<p>Note</p> <p>Literals can have differenct Base, like <code>0x</code> for Hexadecimal, <code>0b</code> for Binary, <code>0o</code> for Octal, etc.</p> Type Example Integer <code>14</code>, <code>0b</code>, <code>0o</code> (decimal, binary, octal) Float <code>3.14</code>, <code>1.6e-10</code> Rune <code>a</code>, <code>\\141</code>, <code>\\u0061</code>, <code>\\U00000061</code>, <code>\\n</code>, <code>\\t</code>, <code>\\</code> <p>Bitshifting</p> <pre><code>1 &lt;&lt; 10 // 1024\n10 &gt;&gt; 1 // 5\n</code></pre>"},{"location":"coding/golang/types/#integer-numeric-types","title":"Integer Numeric Types","text":"<p>Note</p> <p>For general purpose use <code>int</code></p> Type min max size int8 -128 127 8 bit int16 -32768 32767 16 bit int32 -2147483648 2147483647 32 bit int64 -9223372036854775808 9223372036854775807 64 bit uint8 0 255 8 bit uint16 0 65535 16 bit uint32 0 4294967295 32 bit uint64 0 18446744073709551615 64 bit <pre><code>var a int = 14\nvar b int8 = 14\nvar c uint8 = 14\n</code></pre>"},{"location":"coding/golang/types/#floating-point-numeric-types","title":"Floating Point Numeric Types","text":"Type min max size float32 1.2E-38 3.4E+38 32 bit float64 2.2E-308 1.7E+308 64 bit <pre><code>var a float = 3.14\nvar b float32 = 3.14\nvar c float64 = 3.14\n</code></pre>"},{"location":"coding/golang/types/#boolean","title":"Boolean","text":"<pre><code>var b bool\nb = true\nb = false\n</code></pre>"},{"location":"coding/python/pickle/","title":"Python Pickle","text":"<p>Pickle is a standard Python module for serializing and deserializing Python objects. It is used to save objects to a file and load them back later.</p> <p>Warning</p> <p>Pickle is not secure. Never unpickle data received from an untrusted or unauthenticated source.</p>"},{"location":"coding/python/pickle/#pickle-vs-json","title":"Pickle vs JSON","text":"<ul> <li>Pickle is a binary format, while JSON is a text format</li> <li>Pickle is more efficient than JSON</li> <li>Pickle is not human-readable</li> <li>Pickle is not secure (can execute arbitrary code)</li> </ul>"},{"location":"coding/python/pickle/#example","title":"Example","text":"<pre><code>import pickle\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f'Person({self.name}, {self.age})'\n\nperson = Person('John', 30)\n</code></pre> <p>Save the object to a file:</p> <pre><code>with open('person.pickle', 'wb') as f:\n    pickle.dump(person, f)\n</code></pre> <p>Load the object from a file:</p> <pre><code>with open('person.pickle', 'rb') as f:\n    person = pickle.load(f)\n</code></pre> <p>Tip</p> <p>Use <code>cPickle</code> instead of <code>pickle</code> for better performance (C implementation up to 1000 times faster)</p> <p>See also</p> <p>Example Notebook: pickle.ipynb</p>"},{"location":"coding/python/pickle/#multiple-objects","title":"Multiple Objects","text":"<pre><code>import pickle\n\np1 = Person('John', 30)\np2 = Person('Jane', 25)\n\nwith open('people.pickle', 'wb') as f:\n    pickle.dump(p1, f)\n    pickle.dump(p2, f)\n</code></pre> <p>Load the objects from a file in the same order:</p> <pre><code>with open('people.pickle', 'rb') as f:\n    p1 = pickle.load(f)\n    p2 = pickle.load(f)\n</code></pre>"},{"location":"coding/python/pickle/#pickle-dataframes","title":"Pickle DataFrames","text":"picklespandas <pre><code>data = {}\ndata['df1'] = df1\ndata['df2'] = df2\n\nwith open('data.pickle', 'wb') as f:\n    pickle.dump(data, f)\n\nwith open('data.pickle', 'rb') as f:\n    data = pickle.load(f)\n\ndata1 = data['df1']\ndata2 = data['df2']\n</code></pre> <pre><code>df1.to_pickle('df1.pickle')\ndf2.to_pickle('df2.pickle')\n\ndf1 = pd.read_pickle('df1.pickle')\ndf2 = pd.read_pickle('df2.pickle')\n</code></pre>"},{"location":"coding/python/typing/","title":"Python Typing","text":"<p>Simple typing syntax for Python variables, functions and classes with the <code>typing</code> library.</p> <pre><code>from typing import ...\n</code></pre> <ul> <li>https://docs.python.org/3/library/typing.html</li> </ul> <p>Note</p> <p>For more specific data validation, use Pydantic models.</p> <ul> <li>https://docs.pydantic.dev/</li> </ul> <pre><code>pip install pydantic\n</code></pre>"},{"location":"coding/python/typing/#function-inputs","title":"Function Inputs","text":"<p>Easy Usage</p> <pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n</code></pre> <ul> <li><code>a</code>, <code>b</code> are <code>int</code> type</li> <li><code>func</code> returns <code>int</code> type</li> </ul> <p>Lists / Dicts</p> <pre><code>def process(items: list[int]):\n    pass\n</code></pre> <ul> <li><code>items</code> is a <code>list</code> of <code>int</code> type</li> </ul> <pre><code>def process(items: dict[str, int]):\n    pass\n</code></pre> <ul> <li><code>items</code> is a <code>dict</code> with <code>str</code> keys and <code>int</code> values</li> </ul> <p>Optional</p> <pre><code>from typing import Optional\n\ndef process(a: int, b: Optional[int] = 0):\n    pass\n</code></pre> <ul> <li><code>b</code> is optional and defaults to <code>0</code></li> </ul> <p>Union</p> <pre><code>from typing import Union\n\ndef process(a: Union[int, str]):\n    pass\n</code></pre> <ul> <li><code>a</code> can be <code>int</code> or <code>str</code> type</li> </ul>"},{"location":"coding/python/typing/#function-outputs","title":"Function Outputs","text":"<p>Return Values</p> <pre><code>def process() -&gt; list[int]:\n    return [1, 2, 3]\n</code></pre> <ul> <li><code>process</code> returns a <code>list</code> of <code>int</code> type</li> </ul> <pre><code>def process() -&gt; tuple[str, int]:\n    return 'a', 1\n</code></pre> <ul> <li><code>process</code> returns a <code>tuple</code> of <code>str</code> and <code>int</code> type</li> </ul> <p>Return None</p> <pre><code>def process() -&gt; None:\n    pass\n</code></pre> <ul> <li><code>process</code> returns <code>None</code></li> </ul>"},{"location":"coding/python/typing/#classes","title":"Classes","text":"<p>Class Attributes</p> <pre><code>class A:\n    def __init__(self, a: int):\n        self.a = a\n\ndef process(a: A):\n    pass\n</code></pre>"},{"location":"coding/python/fastapi/","title":"Python FastAPI","text":"<p>FastAPI1 is a modern, fast (high-performance), web framework for building APIs.</p> <p>Info</p> <p>FastAPI takes advantage of Python type hints.</p> <p>Features</p> <p>Fast, high performance, fast to code, intuitive, short, robust, standards-based</p>"},{"location":"coding/python/fastapi/#installation","title":"Installation","text":"<pre><code>pip install fastapi\n</code></pre> <p>Info</p> <p>ASGI server ist needed for production:</p> <ul> <li>Uvicorn</li> <li>Hypercorn</li> </ul> <pre><code>pip install \"uvicorn[standard]\"\n</code></pre>"},{"location":"coding/python/fastapi/#interactive-api-docs-automatic","title":"Interactive API Docs (automatic)","text":"Swagger UI2 ReDoc3 http://127.0.0.1:8000/docs http://127.0.0.1:8000/redoc"},{"location":"coding/python/fastapi/#http-methods","title":"HTTP Methods","text":"<p>Note</p> <p>FastAPI works with the OpenAPI Schema.</p> HTTP Method Description FastAPI Decorator GET Read data <code>@app.get()</code> POST Create data <code>@app.post()</code> PUT Update data <code>@app.put()</code> DELETE Delete data <code>@app.delete()</code> <p>Methods in FastAPI are defined with the <code>@app.&lt;method&gt;()</code> decorator.</p> <pre><code>@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"coding/python/fastapi/#example","title":"Example","text":"<pre><code>from typing import Union\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> <pre><code>uvicorn main:app --reload\n</code></pre> <ol> <li> <p>https://fastapi.tiangolo.com/ \u21a9</p> </li> <li> <p>https://swagger.io/tools/swagger-ui/ \u21a9</p> </li> <li> <p>https://github.com/Redocly/redoc \u21a9</p> </li> </ol>"},{"location":"coding/python/fastapi/parameter/","title":"FastAPI Parameters","text":"<p>Path parameter in decorator, gets executed wenn call is made to <code>'/'</code> with <code>get</code> method.</p> <pre><code>@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"coding/python/fastapi/parameter/#path-parameters","title":"Path Parameters","text":"<p>Path variables are defined in the path of the decorator with <code>{}</code>.</p> <pre><code>@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre>"},{"location":"coding/python/fastapi/parameter/#validation-with-type-hints","title":"Validation with Type Hints","text":"<pre><code>@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int):\n    return {\"item_id\": item_id}\n</code></pre> <ul> <li><code>{item_id} = 1</code> results <code>{\"item_id\": 1}</code></li> <li><code>{item_id} = \"foo\"</code> results <code>type_error.integer</code></li> </ul> <p>Warning: Order matters</p> <p><code>/users/me</code> has to be defined before <code>/users/{user_id}</code></p>"},{"location":"coding/python/fastapi/parameter/#predefined-values","title":"Predefined Values","text":"<pre><code>from enum import Enum\n\nclass Name(str, Enum):\n    a = \"a\"\n    b = \"b\"\n\n@app.get(\"/models/{name}\")\ndef get(name: Name):\n    if name == Name.a:\n        return {\"name\": name, \"value\": \"a\"}\n    if name == Name.b:\n        return {\"name\": name, \"value\": \"b\"}\n    return {\"name\": name, \"value\": \"unknown\"}\n</code></pre>"},{"location":"coding/python/fastapi/parameter/#path-parameter-converter","title":"Path Parameter Converter","text":"<p>Note</p> <p>If the path has no other parameters <code>{}</code>, just the path use <code>:path</code></p> <pre><code>@app.get(\"/files/{file_path:path}\")\ndef read_file(file_path: str):\n    return {\"file_path\": file_path}\n</code></pre>"},{"location":"coding/python/fastapi/parameter/#query-parameters","title":"Query Parameters","text":"<p>Other function parameters are interpreted as query parameters.</p> <pre><code>http://127.0.0.1:8000/items/?skip=0&amp;limit=10\n</code></pre> <ul> <li><code>?</code> starts query parameter list</li> <li><code>&amp;</code> separates query parameters</li> </ul>"},{"location":"coding/python/fastapi/parameter/#default-query-parameters","title":"Default Query Parameters","text":"<pre><code>@app.get(\"/items/\")\ndef read_items(q: str = None):\n    return {\"q\": q}\n</code></pre> <ul> <li><code>q = None</code> default value</li> </ul>"},{"location":"coding/python/fastapi/parameter/#required-query-parameters","title":"Required Query Parameters","text":"<pre><code>@app.get(\"/items/\")\ndef read_items(q: str):\n    return {\"q\": q}\n</code></pre> <ul> <li><code>q</code> is required</li> </ul>"},{"location":"coding/python/fastapi/parameter/#optional-query-parameters","title":"Optional Query Parameters","text":"<pre><code>@app.get(\"/items/\")\ndef read_items(q: str | None = None):\n    return {\"q\": q}\n</code></pre> <ul> <li><code>q = None</code> is optional and default <code>None</code></li> </ul>"},{"location":"coding/python/fastapi/parameter/#multiple-path-and-query-parameters","title":"Multiple Path and Query Parameters","text":"<p>Info</p> <p>FasAPI detects all path parameters and query parameters by name.</p> <pre><code>@app.get(\"/users/{user_id}/items/{item_id}\")\ndef read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False):\n    ...\n    return item\n</code></pre>"},{"location":"coding/python/fastapi/request-body/","title":"Fast API Request Body","text":"<p>Info</p> <p>Sending data to server/client, the data is sent in the request body.</p> <ul> <li>API almost has to send response body.</li> <li>Client don't have to send often request body.</li> </ul>"},{"location":"coding/python/fastapi/request-body/#datamodel-creation","title":"Datamodel Creation","text":"<p>Note</p> <p>Datamodels are created with <code>pydantic</code> library.</p> <p>Same logic with <code>optional, default, required</code> parameters.</p> Backend gets POST requestResult <pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n</code></pre> Response<pre><code>{\n\"name\": \"Foo\",\n\"description\": \"An optional description\",\n\"price\": 45.2,\n\"tax\": 3.5\n},\n{\n\"name\": \"Foo\",\n\"price\": 45.2\n}\n</code></pre>"},{"location":"coding/python/fastapi/request-body/#data-model-usage","title":"Data Model Usage","text":"<p>Tip</p> <p><code>Item</code> Datamodel dict can be updated with new key-value pairs.</p> <pre><code>class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\napp = FastAPI()\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\nitem_dict = item.dict()\nif item.tax:\nprice_with_tax = item.price + item.tax\nitem_dict.update({\"price_with_tax\": price_with_tax})\nreturn item_dict\n</code></pre>"},{"location":"coding/python/fastapi/request-body/#request-body-path-query-parameters","title":"Request Body &amp; Path &amp; Query Parameters","text":"<p>Info</p> <p>FasAPI detects/defines all parameters name, also in Datamodels.</p> <pre><code>class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\napp = FastAPI()\n\n@app.put(\"/items/{item_id}\")\nasync def create_item(item_id: int, item: Item, q: str | None = None):\nresult = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n</code></pre>"},{"location":"coding/python/pydantic/","title":"Python Pydantic","text":""},{"location":"general-notes/git/","title":"git","text":"<p>Git is a version control system for tracking changes in computer files and coordinating work on those files among multiple people.</p> <p>Note</p> <p>VS Code has a built-in Git support. You can use it to manage your repositories without using the command line.</p>"},{"location":"general-notes/git/#most-used-commands","title":"Most used commands","text":"<p>Get latest changes from remote repository:</p> <pre><code>git pull\n</code></pre> <p>Note</p> <p>Use <code>--rebase</code> flag to rebase local changes on top of remote changes.</p> <p>Add new file to index:</p> <pre><code>git add &lt;file&gt;\n</code></pre> <p>Note</p> <p>You can add all files in current directory with <code>git add .</code> or <code>git add -a</code></p> <p>Danger</p> <p><code>-f</code> flag is used to force all files to be added to the index also if they are ignored by <code>.gitignore</code> file.</p> <p>Commit changes:</p> <pre><code>git commit -a -m \"Commit message\"\n</code></pre> <p>Note</p> <p>You can use <code>git commit -a</code> to commit all changes in tracked files.</p> <p>If you want to commit only a specific file, you can use <code>git commit -a &lt;file&gt; -m \"Commit message\"</code></p>"},{"location":"general-notes/git/#other-useful-commands","title":"Other useful commands","text":"<p>Note</p> <p>To leave the vim editor, type <code>:q</code> and press enter.</p> <p>Show status of tracked files:</p> <pre><code>git status\n</code></pre> <p>Show changes in tracked files:</p> <pre><code>git diff\n</code></pre> <p>Show changes/tracked/untracked of local files:</p> <pre><code>git status\n</code></pre> <p>Show commit history:</p> <pre><code>git log\n</code></pre> git log options <p>You can also filter the log:</p> Command Description <code>--author=&lt;author&gt;</code> Show commits by author <code>--grep=&lt;string&gt;</code> Show commits with message containing string <code>--since=&lt;date&gt;</code> Show commits after date <code>--until=&lt;date&gt;</code> Show commits before date <code>--oneline</code> Show commits in one line <code>--graph</code> Show commits as a graph"},{"location":"general-notes/git/#branch","title":"branch","text":"<p>Create new branch:</p> <pre><code>git branch &lt;branch name&gt;\n</code></pre> <p>Switch to branch:</p> <pre><code>git checkout &lt;branch name&gt;\n</code></pre> <p>Merge branch into main:</p> <pre><code>git checkout &lt;main branch&gt;\ngit merge &lt;branch name&gt;\n</code></pre>"},{"location":"general-notes/git/#staging","title":"staging","text":"<p>This is the area where you see tracked files that are not yet committed.</p>"},{"location":"general-notes/git/#init-git-push-to-remote-origin","title":"Init git &amp; push to remote origin","text":"<pre><code>git init\n</code></pre> <pre><code>git add .\n</code></pre> <pre><code>git commit -m \"Initial commit\"\n</code></pre> <pre><code>git remote add origin &lt;remote repository url&gt;\n</code></pre> <pre><code>git push -u origin master\n</code></pre>"},{"location":"general-notes/mkdocs-material/","title":"MkDocs Material","text":"<p>Is a theme for MkDocs that provides a clean and responsive design. It is based on the Material Design guidelines by Google. MkDocs is a static site generator that is geared towards building project documentation. It is written in Python and uses Markdown to create pages.</p> <p>Info</p> <ul> <li>MkDocs Material Setup</li> <li>MkDocs Material Reference</li> </ul> <p>Are pretty good resources for learning how to use MkDocs and MkDocs Material.</p>"},{"location":"general-notes/mkdocs-material/#admonitions","title":"Admonitions","text":"<pre><code>!!! tip \"Title\"\n\n    Some content\n</code></pre> <p>Title</p> <p>Some content</p>"},{"location":"general-notes/mkdocs-material/#available-tags","title":"Available Tags","text":"Tag Icon Description <code>note</code> General note <code>abstract</code> Summary of content <code>info</code> Informational note <code>tip</code> Helpful tip <code>success</code> Successful operation <code>question</code> Question <code>warning</code> Warning <code>failure</code> Failed operation <code>danger</code> Danger <code>bug</code> Bug notice <code>example</code> Example for illustration <code>quote</code> Quote"},{"location":"general-notes/mkdocs-material/#code-blocks","title":"Code Blocks","text":"<pre><code>```bash title=\"bash\"\necho \"Hello World\"\n```\n</code></pre> bash<pre><code>echo \"Hello World\"\n</code></pre>"},{"location":"general-notes/mkdocs-material/#multi-tabbed-code-blocks","title":"Multi Tabbed Code Blocks","text":"<pre><code>=== 'python'\n\n    ```python\n    print(\"Hello World\")\n    ```\n\n=== 'javascript'\n\n    ```javascript\nconsole.log(\"Hello World\")\n    ```\n</code></pre> PythonJS <pre><code>print(\"Hello World\")\n</code></pre> <pre><code>console.log(\"Hello World\")\n</code></pre>"},{"location":"general-notes/mkdocs-material/#mermaid","title":"Mermaid","text":"<pre><code>```mermaid\ngraph LR\n    A[Hard] --&gt;|Text| B(Round)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result 1]\n    C --&gt;|Two| E[Result 2]\n```\n</code></pre> <pre><code>graph LR\n    A[Hard] --&gt;|Text| B(Round)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result 1]\n    C --&gt;|Two| E[Result 2]</code></pre>"},{"location":"general-notes/mkdocs-material/#math","title":"Math","text":"<pre><code>$$\n\\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}}\n$$\n</code></pre> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]"},{"location":"math/","title":"Math","text":"<p>This section contains a collection of my <code>LaTeX</code> notes (downloadable as a [PDF]).</p> <ul> <li>Linear Algebra</li> <li>Analysis</li> </ul> <p>Note</p> <p>The notes are in german. Also I don't share the source code of the notes. I do not take any responsibility for any errors in the notes.</p>"},{"location":"math/analysis/","title":"Analysis","text":""},{"location":"math/linear-algebra/","title":"Linear Algebra","text":""},{"location":"overview/ideas-upcoming-projects/","title":"Ideas &amp; Upcoming Projects","text":"Status Icons Reference <p> Idea is in draft stage</p> <p> Idea is in implementation stage</p> <p> Updating/Reworking an existing idea</p> <p> Idea is completed</p> <p> Idea is rejected</p> Title Description Category Status Hungarian Algorithm Theory &amp; Implementation of the Hungarian algorithm in Python Algorithms/Coding NN from Scratch Implementing a Neural Network from scratch in Python Machine Learning Matrices Theory &amp; Implementation of Matrices in Python Math O(n) Big O Notation Theory and testing Algorithms/Coding Graph Theory Theory &amp; Implementation of Graph Theory in Python Algorithms/Coding <p> </p>"},{"location":"overview/urls-resources/","title":"Links and Resources","text":""},{"location":"overview/urls-resources/#general","title":"General","text":"Name Description Url QR-Code Generator Custom QR-Code generator with Style https://qr-code-styling.com/ svgrepo.com Free customizable SVG-Icons https://www.svgrepo.com/"},{"location":"overview/urls-resources/#github","title":"Github","text":"Name Description Url shields.io Badges for your GitHub Repository https://shields.io/"},{"location":"overview/urls-resources/#computer-vision-image-processing","title":"Computer Vision &amp; Image Processing","text":"Name Description Url homogeneous coordinates Visual and interactive Guide https://wordsandbuttons.online"},{"location":"webdev/angular/","title":"Angular","text":"<p>Angular1 is a framework for building client applications in HTML, CSS and TypeScript.</p> <p>It works with:</p> <ul> <li>Modules</li> <li>Components (with templates)</li> <li>Injectors/Services</li> </ul>"},{"location":"webdev/angular/#concept","title":"Concept","text":"<p>Angular Concept of Modules, Components and Injectors2</p> <ol> <li> <p>Angular \u21a9</p> </li> <li> <p>Angular Concept s\u00a0\u21a9</p> </li> </ol>"},{"location":"webdev/angular/angular-libraries/","title":"Angular First-Party Libraries","text":"Library Description Docs <code>Angular Router</code> Advanced client-side navigation and routing based on Angular components. Angular Router <code>Angular Forms</code> Uniform system for form participation and validation. Angular Forms <code>Angular HttpClient</code> Robust HTTP client that can power more advanced client-server communication. Angular HttpClient <code>Angular Animations</code> Rich system for driving animations based on application state. Angular Animations <code>Angular PWA</code> Tools for building Progressive Web Applications (PWA) including a service worker and Web application manifest. Angular PWA <code>Angular Schematics</code> Automated scaffolding, refactoring, and update tools that simplify development at large scale. Angular Schematics"},{"location":"webdev/angular/angular-libraries/#angular-router","title":"Angular Router","text":"<ul> <li>Reference</li> </ul> <pre><code>ng generate module app-routing --flat --module=app\n</code></pre> app.module.ts.component.html <pre><code>import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n{ path: 'home', component: HomeComponent },\n{ path: '', redirectTo: '/home', pathMatch: 'full'},\n{ path: '**', component: PageNotFoundComponent}\n];\n\n@NgModule({\nimports:      [ BrowserModule, RouterModule.forRoot(routes) ],\ndeclarations: [ AppComponent, HomeComponent ],\nbootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n</code></pre> <pre><code>&lt;nav&gt;\n    &lt;a routerLink=\"/\"&gt;Home&lt;/a&gt;\n    &lt;a routerLink=\"/about\"&gt;About&lt;/a&gt;\n&lt;/nav&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n</code></pre>"},{"location":"webdev/angular/angular-libraries/#angular-forms","title":"Angular Forms","text":"<ul> <li>Reference</li> </ul> Form Control Description <code>reactive forms</code> provide direct, explicit access to underlying form object model: more robust, more scalable, reusable, testable <code>template-driven forms</code> rely on directives in template to create/manipulate underlying object: adding simple form to app, straightforward to add to an app, doesn't scale as well as reactive forms"},{"location":"webdev/angular/angular-libraries/#reactive-forms","title":"Reactive Forms","text":"<ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>import { FormGroup, FormControl } from '@angular/forms';\n\n...\n\nexport class Reactive {\nForm = new FormGroup({\nfirstName: new FormControl(''),\nlastName: new FormControl(''),\n});\n}\n</code></pre> <pre><code>&lt;form [formGroup]=\"Form\" (ngSubmit)=\"onSubmit()\"&gt;\n\n&lt;label for=\"first-name\"&gt;First Name: &lt;/label&gt;\n&lt;input id=\"first-name\" type=\"text\" formControlName=\"firstName\"&gt;\n\n&lt;label for=\"last-name\"&gt;Last Name: &lt;/label&gt;\n&lt;input id=\"last-name\" type=\"text\" formControlName=\"lastName\"&gt;\n\n&lt;/form&gt;\n</code></pre>"},{"location":"webdev/angular/angular-libraries/#template-driven-forms","title":"Template-Driven Forms","text":"<ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>import { Component } from '@angular/core';\n\n@Component({\nselector: 'app-template',\ntemplateURL: 'template.component.html',\n})\n\nexport class Template{\nform = '';\n}\n</code></pre> <pre><code>&lt;input type=\"text\" [formControl]=\"form\"&gt;\n</code></pre>"},{"location":"webdev/angular/components/","title":"Angular Components","text":"<p>Note</p> <p>Components are small building blocks.</p> <ul> <li>Reference</li> </ul>"},{"location":"webdev/angular/components/#general","title":"General","text":"<p>Create a component:</p> <pre><code>ng generate component &lt;component-name&gt;\n</code></pre> .component.ts.component.html.component.cssComponent Call <pre><code>import { Component } from \"@angular/core\";\n\n@Component({\nselector: \"hello-world\",\ntemplateUrl: \"hello-world.component.html\",\nstyleUrls: [\"hello-world.component.css\"],\n})\nexport class HelloWorldComponent {\n// The code in this class drives the component's behavior.\n}\n</code></pre> <pre><code>&lt;h2&gt;Hello World&lt;/h2&gt;\n&lt;p&gt;This is my first component!&lt;/p&gt;\n&lt;p class=\"a\"&gt;Hello!&lt;/p&gt;\n</code></pre> .component.css<pre><code>h2 {\ncolor: blue;\n}\n.a {\nmargin: 10px;\n}\n</code></pre> other.component.html<pre><code>&lt;app-hello-world&gt;&lt;/app-hello-world&gt;\n</code></pre>"},{"location":"webdev/angular/components/#interpolation","title":"Interpolation","text":"<p>Note</p> <p>Displaying <code>variables</code> in the html template <code>{{ variable }}</code></p> <ul> <li>Reference</li> </ul> .component.ts.component.htmlOutput <pre><code>import { Component } from \"@angular/core\";\n\n@Component({\nselector: \"hello-world-interpolation\",\ntemplateUrl: \"./hello-world-interpolation.component.html\",\n})\nexport class HelloWorldInterpolationComponent {\nmessage = \"Hello, World!\";\n}\n</code></pre> <pre><code>&lt;h2&gt;{{ message }}&lt;/h2&gt;\n</code></pre> <pre><code>&lt;h2&gt;Hello, World!&lt;/h2&gt;\n</code></pre>"},{"location":"webdev/angular/components/#data-pipes","title":"Data Pipes","text":"<p>Note</p> <p>Data pipes are used to transform <code>strings</code> in the html template <code>{{ variable | pipe }}</code></p> <ul> <li>Reference</li> </ul> Pipe Description <code>DatePipe</code> formats a date value <code>UpperCasePipe</code> transforms text to upper case <code>LowerCasePipe</code> transforms text to lower case <code>CurrencyPipe</code> formats a number as currency <code>DecimalPipe</code> formats a number as decimal <code>PercentPipe</code> formats a number as percent .component.ts.component.htmlOutput <pre><code>import { Component } from \"@angular/core\";\n\n@Component({\nselector: \"hello-world-pipes\",\ntemplateUrl: \"./hello-world-pipes.component.html\",\n})\nexport class HelloWorldPipesComponent {\ntoday = new Date();\nprice = 1.23;\npercent = 0.456;\n}\n</code></pre> <pre><code>&lt;h2&gt;{{ today | date }}&lt;/h2&gt;\n&lt;p&gt;{{ price | currency }}&lt;/p&gt;\n&lt;p&gt;{{ percent | percent }}&lt;/p&gt;\n</code></pre> <pre><code>&lt;h2&gt;2021-03-01&lt;/h2&gt;\n&lt;p&gt;$1.23&lt;/p&gt;\n&lt;p&gt;45.6%&lt;/p&gt;\n</code></pre>"},{"location":"webdev/angular/components/#custom-data-pipes","title":"Custom Data Pipes","text":"<pre><code>ng generate pipe &lt;pipe-name&gt;\n</code></pre> pipe-name.pipe.ts<pre><code>import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'exponentialStrength})\nexport class ExponentialStrengthPipe implements PipeTransform {\ntransform(value: number, exponent = 1): number {\nreturn Math.pow(value, exponent);\n}\n}\n</code></pre>"},{"location":"webdev/angular/components/#property-binding","title":"Property Binding","text":"<p>Note</p> <p>Binding <code>properties</code> from the html template <code>[property]=\"variable\"</code></p> <ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>...\nexport class HelloWorldBindingsComponent {\nfontColor = 'blue';\nsayHelloId = 1;\n}\n</code></pre> <pre><code>&lt;p\n    [id]=\"sayHelloId\"\n    [style.color]=\"fontColor\"&gt;\n    You can set color in the component!\n&lt;/p&gt;\n</code></pre>"},{"location":"webdev/angular/components/#event-binding","title":"Event Binding","text":"<p>Note</p> <p>Binding <code>events</code> from the html template <code>(event)=\"function\"</code></p> <ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>...\nexport class HelloWorldBindingsComponent {\ncanClick = false;\nmessage = 'Hello, World';\nsayMessage() {\nalert(this.message);\n}\n}\n</code></pre> <pre><code>&lt;button\n    type=\"button\"\n    [disabled]=\"canClick\"\n    (click)=\"sayMessage()\"&gt;\n    Trigger alert message\n&lt;/button&gt;\n</code></pre>"},{"location":"webdev/angular/dependency-injection/","title":"Angular Dependency Injection","text":"<p>Note</p> <p>Dependency Injection is a design pattern that separates dependencies of a class from its environment. It is used to provide services, components and dependencies. DI containers create instances of dependencies.</p> <ul> <li>Reference</li> </ul>"},{"location":"webdev/angular/dependency-injection/#service","title":"Service","text":"<pre><code>ng generate service &lt;service-name&gt;\n</code></pre> .service.ts.component.ts.module.ts <pre><code>@Injectable({\nprovidedIn: 'root',\n})\nclass Service {}\n</code></pre> <p>Note: <code>providedIn: 'root'</code> is used to make the service available to the entire application as Singleton Instance.</p> <pre><code>@Component({\nselector: 'component',\ntemplate: '...',\nproviders: [Service]\n})\nclass ComponentClass {}\n</code></pre> <pre><code>@NgModule({\ndeclarations: [ComponentClass],\nimports: [CommonModule],\nproviders: [Service]\n})\nclass ModuleClass {}\n</code></pre>"},{"location":"webdev/angular/directives/","title":"Angular Directives","text":"<p>Note</p> <p>Classes that add additional behavior to an element</p> <ul> <li>Reference</li> </ul>"},{"location":"webdev/angular/directives/#ngclass","title":"NgClass","text":"<p>Note</p> <p>Adds and removes CSS classes on an HTML element.</p> <ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>...\nexport class ngClassComponent {\nthis.isSpecial = true;\n}\n</code></pre> <pre><code>&lt;div [ngClass]=\"isSpecial ? 'special' : ''\"&gt;\n    This div is special\n&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#ngstyle","title":"NgStyle","text":"<p>Note</p> <p>Adds and removes styles inline on an HTML element.</p> <ul> <li>Reference</li> </ul> .component.ts.component.html <pre><code>...\nexport class ngStyleComponent {\nthis.currentSyles = {\n'font-style' : this.canSave   ? 'italic' : 'normal',\n'font-weight': this.isSpecial ? 'bold'   : 'normal'\n};\n}\n</code></pre> <pre><code>&lt;div [ngStyle]=\"currentStyles\"&gt;\n    This div is special\n&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#ngmodel","title":"NgModel","text":"<p>Note</p> <p>Displays and updates the properties of a data-bound object.</p> <ul> <li>Reference</li> </ul> app.module.ts.component.html <pre><code>import { FormsModule } from '@angular/forms';\n...\nimports: [\nBrowserModule,\nFormsModule // &lt;--- import into the NgModule\n],\n...\n</code></pre> <pre><code>&lt;label for=\"example-ngModel\"&gt;\n    [(ngModel)]:\n&lt;/label&gt;\n&lt;input\n    [(ngModel)]=\"currentItem.name\"\n    (ngModelChange)=\"setUppercaseName($event)\"\n    id=\"example-ngModel\"\n&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#structural-directives","title":"Structural Directives","text":"<p>Note</p> <p>Shape and reshape the DOM's structure, by adding, removing, and manipulating elements.</p> <ul> <li>Reference</li> </ul>"},{"location":"webdev/angular/directives/#ngif","title":"NgIf","text":"<pre><code>&lt;app-item-detail *ngIf=\"isActive\" [item]=\"item\"&gt; &lt;/app-item-detail&gt;\n\n&lt;div *ngIf=\"nullCustomer\"&gt;Hello, &lt;span&gt;{{nullCustomer}}&lt;/span&gt;&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#ngfor","title":"NgFor","text":"<pre><code>&lt;div *ngFor=\"let item of items\"&gt;{{item.name}}&lt;/div&gt;\n&lt;app-item-detail *ngFor=\"let item of items\" [item]=\"item\"&gt;&lt;/app-item-detail&gt;\n\n&lt;!-- with index --&gt;\n&lt;div *ngFor=\"let item of items; let i=index\"&gt;{{i + 1}} - {{item.name}}&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/directives/#ngswitch","title":"NgSwitch","text":"<pre><code>&lt;div [ngSwitch]=\"currentItem.feature\"&gt;\n    &lt;app-stout-item\n        *ngSwitchCase=\"'stout'\"\n        [item]=\"currentItem\"\n    &gt;&lt;/app-stout-item&gt;\n    &lt;app-device-item\n        *ngSwitchCase=\"'slim'\"\n        [item]=\"currentItem\"\n    &gt;&lt;/app-device-item&gt;\n    &lt;app-lost-item\n        *ngSwitchCase=\"'vintage'\"\n        [item]=\"currentItem\"\n    &gt;&lt;/app-lost-item&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"webdev/angular/modules/","title":"Angular Modules","text":"<p>Note</p> <p>Angular Modules are containers with different purposes</p> <ul> <li>Reference</li> </ul> <p>Create a module:</p> <pre><code>ng generate module &lt;module-name&gt;\n</code></pre> module-name.module.ts<pre><code>import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\nimports:      [ BrowserModule ],\nproviders:    [ Logger ],\ndeclarations: [ AppComponent ],\nexports:      [ AppComponent ],\nbootstrap:    [ AppComponent ]\n})\nexport class &lt;module-name&gt; { }\n</code></pre>"},{"location":"webdev/angular/testing/","title":"Angular Testing","text":"<p>Info</p> <ul> <li>Test files need to be named with the <code>.spec.ts</code> extension.</li> <li>Also it is recommended to place test files in same directory as the file being tested.</li> <li>Reference</li> </ul> <pre><code>ng test &lt;project-name&gt;\n</code></pre> <p>Create custom config <code>karma.conf.js</code>:</p> <pre><code>ng generate config karma\n</code></pre>"},{"location":"webdev/angular/testing/#continuous-integration-ci","title":"Continuous Integration (CI)","text":"<ul> <li>Reference</li> </ul> <pre><code>ng test --no-watch --no-progress\n</code></pre>"},{"location":"webdev/javascript/","title":"JavaScript","text":"<p>Info</p> <p>JavaScript is a programming language that adds interactivity to your website. This happens in the browser, and it is the main language for the web.</p>"},{"location":"webdev/javascript/#installation","title":"Installation","text":"<ul> <li>Node.js</li> </ul> <p>New Project/Packages init:</p> <pre><code>npm init\n</code></pre> <p>Package Installation:</p> <pre><code>npm install &lt;package-name&gt;\n</code></pre>"},{"location":"webdev/javascript/#packagejson","title":"package.json","text":"<pre><code>{\n\"name\": \"new-project\",\n\"version\": \"1.0.0\",\n\"description\": \"This is a new-project\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n\"dev\": \"parcel index.html\",\n\"build\": \"parcel build index.html\"\n},\n\"repository\": {\n\"type\": \"git\",\n\"url\": \"www.github.com/user/repository\"\n},\n\"keywords\": [\"keyword1\", \"keyword2\"],\n\"author\": \"author\",\n\"license\": \"GPL-3.0\",\n\"dependencies\": {\n\"chart.js\": \"^4.2.1\",\n\"express\": \"^4.18.2\"\n},\n\"devDependencies\": {\n\"parcel\": \"^2.8.3\"\n}\n}\n</code></pre>"},{"location":"webdev/javascript/#run-scripts","title":"run scripts","text":"<pre><code>npm run &lt;script-name&gt;\n</code></pre>"},{"location":"webdev/javascript/#run-js-in-terminal","title":"run js in terminal","text":"<pre><code>node &lt;file-name&gt;\n</code></pre>"},{"location":"webdev/javascript/basics/","title":"Basics","text":"<p>Embed JavaScript in HTML using the <code>&lt;script&gt;</code> tag.</p> <pre><code>&lt;script type=\"text/javascript\" src=\"./main.js\"&gt;\n// code or in imported file\nconsole.log(\"test\")\n&lt;/script&gt;\n</code></pre> <p>Info</p> <p>Embed Script:</p> <ul> <li><code>&lt;head&gt;</code> tag to load before DOM content</li> <li><code>&lt;body&gt;</code>-end tag to load after DOM content (if it needs to access DOM elements)</li> </ul>"},{"location":"webdev/javascript/basics/#datatypes","title":"Datatypes","text":""},{"location":"webdev/javascript/basics/#primitive","title":"Primitive","text":"<pre><code>var x; // undefined\nvar x = 5; // number\nvar x = 3.14; // number\nvar x = \"Test\"; // string\nvar x = [\"Test\", \"Test2\"]; // array\nvar x = true; // boolean\nvar x = null; // null\n</code></pre>"},{"location":"webdev/javascript/basics/#objects","title":"Objects","text":"<pre><code>// object\nvar object = {\nkey1 \"value1\",\nkey2: 12,\ntotal: function() {\nreturn this.key1 + this.key2;\n}\n};\n\nobject.key1 = \"new value\"; // change value\nobject[key2]++; // increment key2\ntotal = object.total(); // call function\n</code></pre>"},{"location":"webdev/javascript/basics/#variable-scopes","title":"Variable Scopes","text":"type scope redeclare update hoisting hoisting init var global/function/local top of scope <code>undefined</code> let block top of scope const block top of scope"},{"location":"webdev/javascript/basics/#var","title":"var","text":"<ul> <li><code>var</code> can be redeclared and updated (global/function/local scoped)</li> </ul> <pre><code>var x = 10; // var Variable\n\nfunction test() {\nvar y = 20;\nvar x = y;\nconsole.log(x); // 20\n}\n</code></pre>"},{"location":"webdev/javascript/basics/#let","title":"let","text":"<ul> <li><code>let</code> can't be redeclared but updated (block scoped)</li> </ul> <pre><code>let x = 10; // let Variable\n\nlet x = 20; // error can't redeclare\nx = 20; // update\n\nfunction test() {\nlet x = 20; // no error because function scoped\n}\n</code></pre>"},{"location":"webdev/javascript/basics/#const","title":"const","text":"<ul> <li><code>const</code> can't be redeclared or updated (block scoped)</li> </ul> <pre><code>const x = 10; // const Variable\n\nconst x = 20; // error can't redeclare\nx = 20; // error can't update\n\nfunction test() {\nconst x = 20; // no error because function scoped\n}\n</code></pre> <ul> <li>Objects and Arrays can be updated</li> </ul> <pre><code>const object = {\nkey1: \"value1\",\nkey2: 12,\n};\n\nobject.key1 = \"new value\"; // no error\n</code></pre>"}]}